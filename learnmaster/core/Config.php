<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 *
 * @since 1.0
 *
 */

namespace lema\core;


class Config extends BaseObject
{
    const DEFAULT_CURRENCY          = 'USD';
    /**
     * @var array
     */
    private $data = [];

    /**
     * Config constructor.
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        foreach ($config as $key => $value) {
            $this->data[$key] = $value;
        }
        parent::__construct([]);
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $hashSalt = $this->lema_hash_salt;
        if (empty($hashSalt)) {
            $hashKey = lema()->helpers->security->getSafeKeyString();
            $this->lema_hash_salt = $hashKey;
        }
        $currency =  lema()->config->lema_currency;
        if (empty($currency)) {
            $currency = Config::DEFAULT_CURRENCY;
            $this->lema_currency = $currency;
        }
    }

    /**
     * @param string $name
     * @return mixed|null
     */
    public function __get($name)
    {
        if (isset($this->data[$name])) {
            return $this->data[$name];
        }
        return lema()->wp->get_option($name, null);
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        if (!empty($value)) {
            lema()->wp->update_option($name, $value);
            $this->data[$name] = $value;
        } else {
            delete_option($name);
            unset($this->data[$name]);
        }
    }

    /**
     * @param string $name can be a single string or a path
     * like get('name') or get('myconfig/name');
     * @return mixed|null
     */
    public function get($name , $default = null) {
        $names = explode('/', $name);
        $names = array_reverse($names);
        $result =  $default;
        $configValue = [];
        while (count($names) > 1) {
            $_name = array_pop($names);
            if (isset($this->data[$_name])) {
                $configValue = $this->data[$_name];
            }
        }
        $_name =  array_pop($names);
        if (isset($configValue[$_name])) {
            $result = $configValue[$_name];
        }
        return $result;
    }

    /**
     * @param bool $pageName
     * @return array|mixed|string
     */
    public function getUrlConfigs($pageName = false)
    {
        $pages = $this->pages;
        $_pages = [];
        foreach ($pages as $name => $options) {
            $url = $this->$name;
            if (empty($url)) {
                $url = $options['slug'];
            }
            $_pages[$name] = $url;
        }
        if ($pageName) {
            return isset($_pages[$pageName]) ? $_pages[$pageName] : $pageName;
        }
        return $_pages;
    }

}
