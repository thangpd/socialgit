<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 *
 * @since 1.0
 *
 */


namespace lema\core;


use lema\core\interfaces\CacheableInterface;

abstract class Controller extends BaseObject implements CacheableInterface
{
    public $viewPath = '';

    /**
     * Controller constructor.
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        parent::__construct($config);
        $this->viewPath = dirname(($this->getPath())) . DIRECTORY_SEPARATOR . 'views/' . $this->getControllerName();
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * Get controller name without Controller suffix
     * @return bool|string
     */
    protected function getControllerName()
    {
        $className = self::className();
        $classNameParts = explode("\\", $className);
        $className = $classNameParts[count($classNameParts) -1];
        if (preg_match("/^(.*?)Controller$/", $className, $matches)) {
            return strtolower($matches[1]);
        }
        return false;
    }

    /**
     * Render view and passed data to client
     * if $return is true, return rendered result to caller
     * @param string $view
     * @param array $data
     * @param bool $return
     * @return string
     * @throws RuntimeException
     */
    public function render($view = '', $data = [], $return = false) {
        $params = static::registerAction();
        if (isset($params['assets'])) {
            foreach ($params['assets'] as $type => $param) {
                if ($type == 'css') {
                    foreach ($param as $option) {
                        wp_enqueue_style($option['id']);
                    }
                } else {
                    foreach ($param as $option) {
                        wp_enqueue_script($option['id']);
                    }
                }
            }
        }
        if (empty($view)) {
            $view = $this->getControllerName();
        }
        $viewPath = $this->viewPath . DIRECTORY_SEPARATOR . $view;
        if (!preg_match('/\.php$/i', $viewPath)) {
            $viewPath .= '.php';
        }
        $data['context'] = $this;
        $data['helpers'] = lema()->helpers;
        if (file_exists($viewPath)) {
            $content = lema()->helpers->general->renderPhpFile($viewPath, $data);
            lema()->hook->registerHook("lema_controller_{$this->getControllerName()}_render", $content);
            if ($return) {
                return $content;
            }
            print $content;
        } else {
            throw new RuntimeException( __("The view {$viewPath} could not be found", 'lema'));
        }
    }

    /**
     * Render a php file with provided path
     * @param $file
     * @param array $data
     * @param bool $return
     * @return string
     * @throws RuntimeException
     */
    public function renderFile($file, $data = [], $return = false) {
        if (file_exists($file)) {
            $data['context'] = $this;
            $content = lema()->helpers->general->renderPhpFile($file, $data);
            lema()->hook->registerHook("lema_controller_{$this->getControllerName()}_render_file", $content);
            if ($return) {
                return $content;
            }
            print $content;
        } else {
            throw new RuntimeException( __("The view file {$file} could not be found", 'lema'));
        }
    }

    /**
     * Response json data to client
     * with following structure
     * {
     *      "code" : HTTP_CODE,
     *      "message" : ACTION_MESSAGE,
     *      "data" : RESPONSE_DATA
     *
     * }
     * @param $data
     */
    public function responseJson($data)
    {
        $_data = [
            'code' => 200,
            'message' => '',
            'data' => []
        ];
        $data = array_merge($_data, $data);
        header('Content-Type: application/json');
        print json_encode($data, JSON_PRETTY_PRINT);
        exit;
    }

    /**
     * If this object able to cache, it needs provider owner cache name
     * @return mixed
     */
    public function getCahename()
    {
        return "controllers";
    }

    /**
     * Flush owner cache to refresh data
     * @return mixed
     */
    public function flushCache()
    {
        lema()->cache->delete($this->getCahename());
    }

    /**
     * @return string
     */
    public function getPath()
    {
        $reflector = new \ReflectionClass(get_called_class());
        $fn = $reflector->getFileName();
        $path = dirname($fn);
        return lema()->helpers->general->fixPath($path);
    }
}