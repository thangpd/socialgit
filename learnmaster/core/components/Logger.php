<?php
/**
 * @project  edu
 * @copyright Â© 2017 by ivoglent
 * @author ivoglent
 * @time  8/16/17.
 */


namespace lema\core\components;



use lema\core\interfaces\ComponentInterface;
use Monolog\Handler\StreamHandler;
use Psr\Log\AbstractLogger;
use Psr\Log\LoggerInterface;

class Logger extends \Monolog\Logger implements ComponentInterface
{
    const MAX_LINE_IN_FILE              =  5000;

    private static $instance = null;


    /**
     * @var string
     */
    private $logDir;

    /**
     * @var array
     */
    private $logConfigs = [
        //Logger::WARNING => 'warning.log',
        Logger::ERROR   => 'error.log',
        //Logger::INFO    => 'info.log',
    ];

    /**
     * Logger constructor.
     * @param string $name
     * @param array $handlers
     * @param array $processors
     */
    public function __construct($name = 'lema', $handlers = array(), $processors = array())
    {
        $this->logDir = LEMA_WR_DIR . DIRECTORY_SEPARATOR . 'logs';
        if (!is_dir($this->logDir)) {
            @mkdir($this->logDir, 0777, true);
        }
        foreach ($this->logConfigs as $level => $file) {
            $filePath = $this->logDir  . DIRECTORY_SEPARATOR . $file;
            if (file_exists($filePath)) {
                $lineCount = count(file($filePath));
                if ($lineCount > self::MAX_LINE_IN_FILE) {
                    //Move current file to old-file
                    rename($filePath, $filePath . '-' . date('Ymdhis'));
                }
            }

            $handlers[] = new StreamHandler($filePath, $level);
        }

        parent::__construct($name, $handlers, $processors);
    }

    /**
     * @param array $config
     * @return $this
     */
    public static function getInstance($config = [])
    {
        if (empty(self::$instance)) {
            self::$instance = new Logger();
        }
        return self::$instance;
    }

    public function error($message, array $context = array())
    {
        if (is_array($message) || is_object($message)) {
            $message = json_encode($message);
        }
        return parent::error($message, $context); // TODO: Change the autogenerated stub
    }
}