<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 * @since 1.0
 */


namespace lema\core\components;

use lema\core\components\Form;
use lema\core\components\Hook;
use lema\core\BaseObject;
use lema\core\interfaces\MigrableInterface;
use lema\core\RuntimeException;
use lema\core\interfaces\ComponentInterface;
use lema\core\Controller;
use lema\models\CourseModel;
use lema\models\Instructor;
use lema\models\OrderModel;
use lema\models\Student;

class Mailer extends BaseObject implements ComponentInterface, MigrableInterface
{
    const MAIL_STUDENT_ENROLL_PAID          = 'student_enroll_paid';
    const MAIL_STUDENT_ENROLL_FREE          = 'student_enroll_free';
    const MAIL_INSTRUCTOR_COURSE_PUBLISH    = 'instructor_publish_course';
    const MAIL_STUDENT_CHECKOUT             = 'student_checkout';
    const MAIL_STUDENT_ENROLL_LIST          = 'student_course_list';

    private $mailTemplate                   = '';

    /**
     * @var array|mixed
     */
    private $mailers = [];

    /**
     * Mailer constructor.
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        parent::__construct($config);
        $this->mailTemplate = LEMA_PATH . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . 'emails';
    }


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->mailers = [
            self::MAIL_STUDENT_ENROLL_FREE => [
                'title' => __('When student enrolled to a free course', 'lema'),
                'supportedParams' => [
                    'STUDENT_NAME' => [
                        'label' => __('Student name', 'lema'),
                        'value' => function($student) {
                            /** @var Student $student */
                            return $student->user->display_name;
                        }
                    ],
                    'STUDENT_FIRST_NAME' => [
                        'label' => __('Student first name', 'lema'),
                        'value' => function($student) {
                            /** @var Student $student */
                            return $student->user->first_name;
                        }
                    ],
                    'STUDENT_PROFILE_URL' => [
                        'label' => __('Student profile URL', 'lema'),
                        'value' => function($student) {
                            /** @var Student $student */
                            return $student->getProfileUrl();
                        }
                    ],
                    'COURSE_NAME' => [
                        'label' => __('Name of course'),
                        'value' => function($course) {
                            /** @var CourseModel $course */
                            return $course->post->post_title;
                        }
                    ],
                    'COURSE_URL' => [
                        'label' => __('URL of course'),
                        'value' => function($course) {
                            /** @var CourseModel $course */
                            return get_permalink($course->post);
                        }
                    ]
                ]
            ],
            self::MAIL_STUDENT_ENROLL_PAID => [
                'title' => __('When student paid and enrolled to course', 'lema'),
                'supportedParams' => [
                    'STUDENT_NAME' => [
                        'label' => __('Student name', 'lema'),
                        'value' => function($student) {
                            /** @var Student $student */
                            return $student->user->display_name;
                        }
                    ],
                    'STUDENT_PROFILE_URL' => [
                        'label' => __('Student profile URL', 'lema'),
                        'value' => function($student) {
                            /** @var Student $student */
                            return $student->getProfileUrl();
                        }
                    ],
                    'LIST_ITEMS' => [
                        'label' => __('List of course items', 'lema'),
                        'value' => function ($order) {
                            /** @var OrderModel $order */
                            $template = lema()->mailer->getDefaultTemplate(self::MAIL_STUDENT_ENROLL_LIST, true);
                            return lema()->helpers->general->renderPhpFile($template, [
                               'order' => $order
                            ]);
                        }
                    ],
                    'ORDER_TOTAL' => [
                        'label' => __('Total amount of order', 'lema'),
                        'value' => function($order) {
                            /** @var OrderModel $order */
                            return $order->total;
                        }
                    ],
                    'ORDER_SUBTOTAL' => [
                        'label' => __('Subtotal of order', 'lema'),
                        'value' => function($order) {
                            /** @var OrderModel $order */
                            return $order->subtotal;
                        }
                    ],
                    'ORDER_TAX_VALUE' => [
                        'label' => __('Tax of order', 'lema'),
                        'value' => function($order) {
                            /** @var OrderModel $order */
                            return $order->tax_value;
                        }
                    ],
                    'ORDER_TAX_CLASS' => [
                        'label' => __('Tax class of order', 'lema'),
                        'value' => function($order) {
                            /** @var OrderModel $order */
                            return $order->tax_class;
                        }
                    ],
                ],


            ],
            self::MAIL_INSTRUCTOR_COURSE_PUBLISH => [
                'title' => __('When instructor\'s course was published', 'lema'),
                'supportedParams' => [
                    'INSTRUCTOR_NAME' => [
                        'label' => __('Instructor name', 'lema'),
                        'value' => function($instructor) {
                            /** @var Instructor $instructor */
                            return $instructor->user->display_name;
                        }
                    ],
                    'COURSE_LINK' => [
                        'label' => __('Course link', 'lema'),
                        'value' => function($course) {
                            /** @var CourseModel $course */
                            return get_permalink($course->post);
                        }
                    ],
                    'COURSE_TITLE' => [
                        'label' => __('Course title', 'lema'),
                        'value' => function($course) {
                            /** @var CourseModel $course */
                            return $course->post->post_title;
                        }
                    ]
                ]
            ]
        ];
        $this->mailers = lema()->hook->registerFilter('lema_mailers', $this->mailers);
        lema()->wp->do_action('lema_email_ready', $this);
    }

    /**
     * @param bool $type
     * @return array
     */
    public function getMailingList($type = false)
    {
        if ($type !== false) {
            return $this->mailers[$type];
        }
        return $this->mailers;
    }

    /**
     * @param $type
     * @return bool|string
     */
    public function getDefaultTemplate($type, $pathOnly = false)
    {
        $tempPath = $this->mailTemplate . DIRECTORY_SEPARATOR . $type  . '.php';
        $tempPathTheme = get_template_directory() . DIRECTORY_SEPARATOR . 'learnmaster' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . 'emails' . DIRECTORY_SEPARATOR . $type . '.php';
        $content = '';
        if (file_exists($tempPathTheme)) {
            if (!$pathOnly) {
                $content = file_get_contents($tempPathTheme);
            } else {
                $content = $tempPathTheme;
            }
        } else if (file_exists($tempPath)) {
            if (!$pathOnly) {
                $content = file_get_contents($tempPath);
            } else {
                $content = $tempPath;
            }
        }
        return $content;
    }

    /**
     * @param $type
     * @return string
     */
    public function getMailTemplate($type) {
        $templates = lema()->config->mail_templates;
        if (empty($templates)) {
            $templates = [];
        }
        if (array_key_exists($type, $templates)) {
            return $templates[$type];
        }
        return $this->getDefaultTemplate($type);
    }

    /**
     * Set an email template
     * @param $type
     * @param $template
     * @return void
     */
    public function setMailTemplate($type, $template)
    {
        $mailTemplates =  lema()->config->mail_templates;
        $mailTemplates[$type] = $template;
        lema()->config->mail_templates = $mailTemplates;
    }

    /**
     * @param $type
     * @param $subject
     * @param $to
     * @param $data
     * @return bool
     */
    public function sendMail($type, $subject, $to, $data){
        $mail = $this->getMailData($type, $data);
        if (!empty($mail)) {
            $headers = array('Content-Type: text/html; charset=UTF-8');
            return wp_mail($to, $subject, $mail, $headers);
        }
        return false;
    }


    /**
     * Replace placeholder by it values
     * @param $type
     * @param $data
     * @return mixed|string
     * @throws RuntimeException
     */
    public function getMailData($type, $data)
    {
        $template = $this->getMailTemplate($type);
        $mailer = $this->getMailingList($type);
        if (!empty($mailer)) {
            $supportedParams = $mailer['supportedParams'];
            foreach ($supportedParams as $name => $param) {
                $callback = $param['value'];
                $ref = new \ReflectionFunction($callback);
                $params = [];
                foreach( $ref->getParameters() as $param) {
                    if (!isset($data[$param->name])) {
                        throw new RuntimeException(__("Error email template. Missing {$param->name} information", 'lema'));
                    }
                    $params[$param->name] = $data[$param->name];

                }
                $value = call_user_func_array($callback, $params);
                $template = preg_replace("/\{$name\}/i", $value, $template);
            }
        }
        return $template;
    }


    /**
     * Run this function when plugin was activated
     * We need create something like data table, data roles, caps etc..
     * @return mixed
     */
    public function onActivate()
    {
        $mailTemplates = [
            self::MAIL_STUDENT_ENROLL_FREE => $this->getDefaultTemplate(self::MAIL_STUDENT_ENROLL_FREE),
            self::MAIL_STUDENT_ENROLL_PAID => $this->getDefaultTemplate(self::MAIL_STUDENT_ENROLL_PAID),
            self::MAIL_STUDENT_CHECKOUT => $this->getDefaultTemplate(self::MAIL_STUDENT_CHECKOUT),
            self::MAIL_INSTRUCTOR_COURSE_PUBLISH => $this->getDefaultTemplate(self::MAIL_INSTRUCTOR_COURSE_PUBLISH),
        ];
        $mailTemplates = lema()->hook->registerFilter('lema_default_mail_templates', $mailTemplates);
        lema()->config->mail_templates = $mailTemplates;
    }

    /**
     * @param $type
     */
    public function restoreDefault($type) {
        $template = $this->getDefaultTemplate($type);
        return $this->setMailTemplate($type, $template);
    }
    /**
     * Run this function when plugin was deactivated
     * We need clear all things when we leave.
     * Please be a polite man!
     * @return mixed
     */
    public function onDeactivate()
    {

    }

    /**
     * Run if current version need to be upgraded
     * @param string $currentVersion
     * @return mixed
     */
    public function onUpgrade($currentVersion)
    {
        // TODO: Implement onUpgrade() method.
    }

    /**
     * Run when learn master was uninstalled
     * @return mixed
     */
    public function onUninstall()
    {
        lema()->config->mail_templates = '';
    }
}