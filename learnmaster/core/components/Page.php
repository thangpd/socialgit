<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 *
 * @since 1.0
 *
 */


namespace lema\core\components;


use lema\core\BaseObject;
use lema\core\interfaces\CacheableControllerInterface;
use lema\core\interfaces\ComponentInterface;


class Page extends BaseObject implements ComponentInterface
{
    private $pages = [
        'admin' => [],
        'front' => []
    ];

    /**
     * @var string
     */
    private $lemaRootPage = '';
    /**
     * @var string
     */
    private $lemaRootPageSingle = '';

    /**
     * @var array
     */
    private $pageHandler = [];

    private $pageTitle = '';

    /**
     * Asset of single page
     * @var array
     */
    private $pageAssets = [];

    /**
     * Page constructor.
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        parent::__construct($config);
        $this->lemaRootPage = LEMA_PATH . '/templates/page.php';
        $this->lemaRootPageSingle = LEMA_PATH . '/templates/single.php';
        lema()->hook->listenHook('admin_menu', [$this, 'registerAdminPage']);
        lema()->hook->listenFilter('template_include', [$this, 'registerFrontPage']);
        lema()->hook->listenFilter('document_title_parts', [$this, 'changePageTitle']);
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

    }

    /**
     * @param string $title
     * @return string
     */
    public function changePageTitle($title = []) {
        if (!empty($this->pageHandler) && isset($this->pageHandler[2])) {
            if (isset($this->pageHandler[2]['title'])) {
                $title['title'] = $this->pageHandler[2]['title'];
                //$title['site'] = $this->pageHandler[2]['title'];
            }

        }
        return $title;
    }
    /**
     * @param string $type
     * @param $slug
     * @param $viewCallback
     */
    public function addPage($type = 'admin', $slug, $viewCallback){
        $this->pages[$type][$slug] = $viewCallback;
    }

    /**
     * Register admin page
     */
    public function registerAdminPage()
    {
        $adminPages = $this->pages['admin'];
        $adminPages = lema()->hook->registerFilter('lema_admin_page', $adminPages);
        foreach ($adminPages as $slug => $page) {
            add_submenu_page(isset($page['parent']) ? $page['parent'] : '' ,$page['title'], $page['menu'], $page['capability'], $slug, $page['action']);
        }

    }

    /**
     * @param $template
     * @return mixed
     */
    public function registerFrontPage($template)
    {
        global $wp,$wp_query;
        $frontPages = $this->pages['front'];
        $frontPages = lema()->hook->registerFilter('lema_front_page', $frontPages);
        $object = get_queried_object();
        //check + create page
        if ( empty($object) || isset($_GET['_page'])) {
            $slug = isset($_GET['_page']) ? $_GET['_page'] : '';
            if (empty($slug)) {
                if (!empty($wp->request))
                    $slug = $wp->request;
                else
                    if (!empty($_SERVER['REQUEST_URI'])) {
                        $slug = $_SERVER['REQUEST_URI'];
                        if (preg_match('/^\//' , $slug)) {
                            $slug = substr($slug, 1);
                        }
                        if (preg_match('/\/$/', $slug)) {
                            $slug = substr($slug, 0,strlen($slug) - 1);
                        }
                    }
            }
            
            if (empty($slug)) {
                if (!empty($wp->request))
                    $slug = $wp->request;
                if (!empty($_SERVER['REQUEST_URI'])) {
                    $uri = ($_SERVER['SERVER_PORT'] == 80 ? 'http://' : 'https://') . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
                    $slug = str_replace(site_url(), '', $uri);
                    if (preg_match('/^\//', $slug)) {
                        $slug = substr($slug, 1);
                    }
                    if (preg_match('/\/$/', $slug)) {
                        $slug = substr($slug, 0, strlen($slug) - 1);
                    }

                }
            }
            if (strpos($slug, '?') !== false) {
                $slug = substr($slug, 0, strlen($slug) - strpos($slug, '?'));
            }
            if (!empty($slug)) {
                if (isset($frontPages[$slug])) {
                    $page = $frontPages[$slug];
                    //$this->createPageTemplate($slug);
                    $this->pageHandler = $page;
                    if (isset($page[2])) {
                        $options = $page[2];
                        if (isset($options['single']) && $options['single']) {
                            $template = $this->lemaRootPageSingle;
                        } else {
                            $template = $this->lemaRootPage;
                        }
                        if (isset($options['db']) && $options['db']) {
                            $registerTemplate = [$page[0], $page[1], $template];
                            $this->createPageTemplate($slug, $registerTemplate, $options);
                        }
                    } else {
                        $template = $this->lemaRootPage;
                    }
                    status_header('200');
	                $wp_query->is_404 = false;
                    if (!empty($options['title'])) {
                        $this->pageTitle = $options['title'];
                    }
                } else {

                    foreach ($frontPages as $_slug => $options) {
                        $pageSlug = $_slug;
                        $params = $this->parseSlug($_slug);
                        if (count($params) > 0) {
                            $_slug = str_replace('/', '\/', $_slug);
                            //$_slug = str_replace('-', '\-', $_slug);
                            //$_slug = str_replace('.', '\.', $_slug);
                            if (preg_match_all("/^$_slug$/i", $slug, $matches)) {
                                $page = $frontPages[$pageSlug];
                                $this->pageHandler = $page;
                                for ($i = 0 ; $i < count($params); $i++) {
                                    $_GET[$params[$i]] = isset( $matches[$i+1][0]) ?  $matches[$i+1][0] : '';
                                }
                                $pageConfig = isset($options[2]) ? $options[2] : [];
                                if (isset($pageConfig['single']) && $pageConfig['single']) {
                                    $template = $this->lemaRootPageSingle;
                                } else {
                                    $template = $this->lemaRootPage;
                                }
                                status_header('200');
	                            $wp_query->is_404 = false;
                                if (!empty($options['title'])) {
                                    $this->pageTitle = $options['title'];
                                }
                                break;

                            }
                        } else {
                            $this->pageHandler = [];
                        }

                    }
                }
            }

        } else {
            if ($object instanceof \WP_Post && $object->post_type == 'course') {
                if (is_single()) {
                    do_action('lema_course_view_detail', $object->ID);
                }
                $this->pageHandler = apply_filters('lema_course_detail_handler', ['lema\front\controllers\CourseController', 'courseDetail']);
                return apply_filters('lema_course_detail_layout', $this->lemaRootPage);
            }
            if ($object instanceof \WP_Post && $object->post_type == 'lema_bundle') {
                if (is_single()) {
                    do_action('lema_bundle_view_detail', $object->ID);
                }
                $this->pageHandler = apply_filters('lema_bundle_detail_handler', ['lema\front\controllers\BundleController', 'bundleDetail']);
                return apply_filters('lema_course_detail_layout', $this->lemaRootPage);
            }
            if ($object instanceof \WP_Term && $object->taxonomy == 'cat_course') {
                $this->pageHandler = ['lema\front\controllers\CourseCatController', 'renderCategoryDetail'];
                return $this->lemaRootPage;
            }
            if ($object instanceof \WP_Term && $object->taxonomy == 'cat_bundle') {
                $this->pageHandler = ['lema\front\controllers\BundleCatController', 'renderCategoryDetail'];
                return $this->lemaRootPage;
            }
            $_template = ($object instanceof \WP_Post) ? get_post_meta($object->ID, 'lema_page_template', true) : '';
            if (!empty($_template)) {
                if (!is_array($_template)) {
                    $_template = json_decode(urldecode($_template), true);
                }
                $template = $_template[2];
                unset($_template[2]);
                $this->pageHandler = $_template;
            } else {
                $this->pageHandler  = [];
            }
        }
        return $template;
    }

    /**
     * @return mixed
     */
    public function execute()
    {
        if (!empty($this->pageHandler)) {
            $controllerName = $this->pageHandler[0];
            $actionName  = $this->pageHandler[1];
            $controller = $controllerName::getInstance();
            $cacheName = md5($controllerName . $actionName);
            if (!LEMA_DEBUG && $controller instanceof CacheableControllerInterface) {
                $content = lema()->cache->get($cacheName);
                if (!empty($content)) {
                    return $content;
                }
            }
            $content = $controller->$actionName();
            $content = lema()->helpers->general->minifyHtml($content);
            lema()->cache->set($cacheName, $content);
            return $content;
        }
    }

    /**
     * @param $slug
     * @return array
     */
    public function parseSlug(&$slug)
    {
        $params  = [];
        if (preg_match_all('/\[(.*?)\]/', $slug, $matches)) {
            foreach ($matches[1] as $match) {
                $ms = explode(' as ', $match);
                if (count($ms) == 2) {
                    $params[] = $ms[1];
                    $slug = str_replace("[$match]", $ms[0], $slug);
                }
            }
        }
        return $params;
    }

    /**
     * create page template default
     */
    private function createPageTemplate($post_name, $template, $options = [])
    {
        $post_type = 'page';
        $post_status = 'publish';
        $page = get_posts( ['name' => $post_name , 'post_type' => $post_type, 'post_status' => $post_status] );
        if (count($page) == 0) {
            $title = isset($options['title']) ? $options['title'] : ucfirst($post_name);
            $postarr = [
                'post_title' => $title,
                'post_status' => $post_status,
                'post_type' => $post_type,
                'post_name' => $post_name
            ];
            $postId = wp_insert_post($postarr);
            if ($postId) {
                update_post_meta($postId, 'lema_page_template', urlencode(json_encode($template)));
            }
        }
    }


    /**
     * @param $path
     * @return string
     */
    public function getPageUrl($path) {
        $rewrite = new \WP_Rewrite();
        if ($rewrite->using_mod_rewrite_permalinks()) {
            if ($rewrite->using_index_permalinks()) {
                return site_url() . '/index.php/' . $path;
            }
            return site_url() . '/' . $path;
        } else {
            return site_url() . '?_page=' . $path;
        }
    }
}
