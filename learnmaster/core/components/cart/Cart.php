<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 *
 * @since 1.0
 *
 */


namespace lema\core\components\cart;


use lema\core\BaseObject;
use lema\core\interfaces\CartInterface;
use lema\core\interfaces\CartItemInterface;
use lema\core\interfaces\ComponentInterface;

use lema\core\RuntimeException;
use lema\models\CourseModel;
use lema\models\OrderItemModel;
use lema\models\OrderModel;
use lema\models\Student;

class Cart extends BaseObject implements ComponentInterface, CartInterface
{
    const LIMIT_CART_ITEM           = 10;
    /**
     *
     * @var CartItemInterface[]
     */
    private $items = [];

    /**
     * @var string cardId
     */
    private $id;

    /**
     * Related order ID
     * The order id will added after function convertToOrder called
     * @var int
     */
    private $order_id;

    /**
     * Cart constructor.
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        parent::__construct($config);
        lema()->hook->listenHook('wp_login', [$this, 'sync']);
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function getCartId()
    {
        return $this->id;
    }

    /**
     * Add an item to card
     * @param CartItemInterface $item
     * @return CartInterface |  false
     */
    public function addItem(CartItemInterface $item)
    {
        if (isset($this->items[$item->getItemId()])) {
            /*$currentItem = $this->items[$item->getItemId()];
            $currentItem->setQuantity($currentItem->getQuantity() + $item->getQuantity());
            $this->items[$item->getItemId()] = $currentItem;*/
            return $this;
        } else {
            if (count($this->items) < self::LIMIT_CART_ITEM) {
                $this->items[$item->getItemId()] = $item;
            } else {
                return false;
            }

        }
        $this->order_id = null;
        $this->sync();
        return $this;
    }

    /**
     * Sync cart items
     * if is user logged in save it to usermeta
     * otherwise store in cookie
     */
    public function sync()
    {
        $cartId = $this->id;
        if (empty($cartId)) {
            $cartId = time() . lema()->helpers->general->getRandomString(6);
        }
        $items = $this->getItems(true);
        $data = [
            'id' => $cartId,
            'items' => $items
        ];
        if (!empty($this->order_id)) {
            $data['order_id'] = $this->order_id;
        }
        if (empty($items)) {
            $data = [];
        }
        if (is_user_logged_in()) {
            $userId = get_current_user_id();
            update_user_meta($userId, 'lema_cart', $data);

        } else {
            lema()->cookie->set('lema_cart', serialize($data), 86400 * 30);
        }
    }


    /**
     * Remove an item from cart
     * @param $id
     * @return mixed
     */
    public function removeItem($id)
    {
        foreach ($this->items as $itemId => $item) {
            if ($id == $itemId) {
                unset($this->items[$id]);
                $this->order_id = null;
                $this->sync();
                return true;
            }
        }
        return false;
    }

    /**
     * Get subtotal
     * @return float
     */
    public function getSubtotal($currency = false)
    {
        $subtotal = 0;
        foreach ($this->items as $item) {
            /** @var CartItemInterface $item */
            $subtotal += $item->getSubtotalValue();
        }
        if ($currency) {
            return lema()->helpers->general->currencyFormat($subtotal);
        }
        return $subtotal;
    }

    public function getTotalItems(){
        $total = 0;
        foreach ($this->items as $item) {
            /** @var CartItemInterface $item */
            $total += $item->getQuantity();
        }
        return $total;
    }
    /**
     * Clear shopping cart
     * @return mixed
     */
    public function destroy()
    {
        $this->items = [];
        if (is_user_logged_in()) {
            $userId = get_current_user_id();
            update_user_meta($userId, 'lema_cart', []);
        } else {
            lema()->cookie->set('lema_cart', serialize([]), 86400 * 30);
        }

    }


    /**
     * Get all cart items
     * @param bool $array
     * @return CartItemInterface[] | array
     */
    public function getItems($array = false)
    {
        if (!$array) {
            return $this->items;
        }
        $items = [];
        foreach ($this->items as $item) {
            $items[$item->getItemId()] = $item->getQuantity();
        }
        return $items;
    }

    /**
     * Get total
     * @return float
     */
    public function getTotal()
    {
        $tax = 0;
        $tax = lema()->hook->registerFilter('lema_order_tax_value', $tax);
        return $this->getSubtotal() + $tax;
    }

    /**
     * @param array $items array of items ['COURSE_ID' => 'QUANTITY']
     * @return $this
     */
    public function _restore($items = [], $id = '', $order_id = '') {
        foreach ($items as $courseId => $quantity) {
            if (is_user_logged_in()) {
                $student = Student::getCurrentUser();
                if (!empty($student)) {
                    if ($student->checkEnrolled($courseId)) {
                        continue;
                    }
                }
            }
            $course = CourseModel::findOne($courseId);
            if (!empty($course)) {
                $item = new CartItem($course, $quantity);
                $this->items[$item->getItemId()] = ($item);
            }
        }
        $this->id = $id;
        $this->order_id = $order_id;
        $this->sync();
        return $this;
    }

    /**
     * Restore cart from database (usermeta)
     * @return bool|Cart
     */
    public static function restoreFromDatabase()
    {
        $cartOptions = get_user_meta(get_current_user_id(), 'lema_cart', true);
        if (!is_array($cartOptions)) {
            $cartOptions = unserialize($cartOptions);
        }
        /**
         * Also restore cart item from cookies
         */
        $cookies = lema()->cookie->lema_cart;
        if (!empty($cartOptions) || !empty($cookies)) {
            $cart = new self();
            if (!empty($cookies)) {
                $cookies = unserialize(str_replace("\\", '', $cookies));
                if (!empty($cookies)) {
                    foreach ($cookies['items'] as $courseId => $quantity) {
                        if (isset($cartOptions['items'][$courseId])) {
                            //$cartOptions['items'][$courseId] = $cartOptions['items'][$courseId] + $quantity;
                            //Do  nothing
                        } else {
                            $cartOptions['items'][$courseId] = $quantity;
                        }
                    }
                    //Destroy cart cookie
                    lema()->cookie->set('lema_cart', '', 0);
                }
            }
            $cart->_restore($cartOptions['items'], @$cartOptions['id'], isset($cartOptions['order_id']) ? $cartOptions['order_id'] : '');
            return $cart;
        }
        return false;
    }

    /**
     * Restore cart from client cookies
     * @return bool|Cart
     */
    public static function restoreFromCookie()
    {
        $cookies = lema()->cookie->lema_cart;
        if (!empty($cookies)) {
            $cookies = unserialize(str_replace("\\", '', $cookies));
            if (!empty($cookies)) {
                $cart = new self();
                $cart->_restore($cookies['items'], @$cookies['id'], @$cookies['order_id']);
                return $cart;
            }
        }
        return false;
    }

    /**
     * Restore user cart
     * @return bool|Cart
     */
    public static function restore()
    {
        if (is_user_logged_in()) {
            return self::restoreFromDatabase();
        } else {
            return self::restoreFromCookie();
        }
    }

    /**
     * Convert cart to order after user checked out
     * @return bool | OrderModel
     */
    public function convertToOrder()
    {
        if (count($this->items) ==0) return false;
        // TODO: Implement convertToOrder() method.
        if (is_user_logged_in()) {
            if (!empty($this->order_id)) {
                return OrderModel::findOne($this->order_id);
            } else {
                $order = new OrderModel();
                $orderId = $order->save();

                if ($orderId) {
                    update_post_meta($orderId, 'lema_order_user_id', get_current_user_id());
                    $items = $this->getItems();
                    foreach ($items as $_item) {
                        $item = new OrderItemModel();
                        $item->course_id = $_item->getItemId();
                        $item->quantity = $_item->getQuantity();
                        $item->order_id = $orderId;
                        $item->save();
                    }
                    $this->order_id = $orderId;
                    $this->sync();
                    wp_update_post([
                        'ID' => $orderId,
                        'title' => '#Order ' . $orderId
                    ]);
                    return $order->loadPost($orderId);
                } else {
                    throw new RuntimeException(__('Can not create your order', 'lema'));
                }

            }
        } else {
            throw new RuntimeException(__('User must logged in first', 'lema'));
        }
    }

    /**
     * @param CartItem $items
     */
    public function setItems($items) {
        $this->items = $items;
        $this->order_id = null;
        $this->sync();
    }
}
