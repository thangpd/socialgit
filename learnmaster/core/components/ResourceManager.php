<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 * @since 1.0
 *
 */

namespace lema\core\components;


use lema\core\BaseObject;
use lema\core\interfaces\ComponentInterface;
use lema\core\interfaces\ResourceInterface;
use lema\core\interfaces\ResourceManagerInterface;
use lema\core\interfaces\ScriptInterface;
use lema\core\interfaces\ShortcodeInterface;
use lema\core\interfaces\StyleInterface;
use lema\libs\CssMinifier;
use MatthiasMullie\Minify\CSS;
use MatthiasMullie\Minify\JS;


class ResourceManager extends BaseObject implements ComponentInterface, ResourceManagerInterface {
	/**
	 * @var ResourceInterface[]
	 */
	private static $resources = [];

	/**
	 * @var array
	 */
	private $inlineScripts = [];

	/**
	 * Data which will be passed to client as javascript object
	 * @var array
	 */
	private $jsConfigs = [];

	/**
	 * @var bool
	 */
	private static $footerPrinted = false;

	public function init() {
		parent::init(); // TODO: Change the autogenerated stub
		try {
			lema()->wp->add_action( 'wp_footer', [ $this, 'printInlineScript' ] );
			$pageUrls = lema()->config->pages;
			$urls     = lema()->config->getUrlConfigs();
			if ( class_exists( 'WooCommerce' ) ) {
				$urls['lema_checkout'] = wc_get_checkout_url();
				$urls['lema_cart']     = wc_get_cart_url();
			} else {
				foreach ( $urls as &$url ) {
					$url = lema()->page->getPageUrl( $url );
				}
			}
			$preloader = apply_filters( 'lema_preloader', [] );
			if ( ! empty( $preloader ) ) {
				$preloader_configs = "{\"enabled\":\"1\",\"icon\":\"{$preloader['icon']}\"}";
			}


			$this->jsConfigs = [
				'baseUrl'        => site_url(),
				'lazyShortcode'  => lema()->config->lazyShortcode,
				'ajaxurl'        => admin_url( 'admin-ajax.php' ),
				'debug'          => LEMA_DEBUG ? true : false,
				'urls'           => $urls,
				'configs'        => [
					'autoSuccessVideo' => 70
				],
				'ui'             => [
					'preloader'         => '<div class="lema-loader"></div>',
					'preloader_configs' => $preloader_configs,
				],
				'user_logged_in' => is_user_logged_in(),
				'user_id'        => get_current_user_id()
			];
			lema()->hook->listenHook( 'wp_footer', [ $this, 'printFooterScripts' ] );
		} catch ( \Exception $e ) {

		}
	}

	/**
	 * Print footer script
	 */
	public function printFooterScripts() {
		if ( self::$footerPrinted == false ) {
			$data = apply_filters( 'lema_shortcode_selfdo', [] );
			if ( isset( $data['lema_do_shortcode'] ) ) {
				$str = 'jQuery(function(){lema.shortcodes.do(' . json_encode( $data['lema_do_shortcode'] ) . ');});';
				wp_add_inline_script( 'lema.shortcode.footer', $str );
			}
			self::$footerPrinted = true;
		}
	}

	public function printInlineScript( $scripts = [] ) {
		$template = <<<EOF
  <script type="text/javascript" id="{ID}">
                {SCRIPT}
            </script>
EOF;
		if ( empty( $scripts ) ) {
			$scripts = $this->inlineScripts;
		}
		foreach ( $scripts as $id => $script ) {
			$print = str_replace( '{SCRIPT}', $script, $template );
			$print = str_replace( '{ID}', $id, $print );
			echo $print;
		}

	}

	/**
	 * Register core resource
	 */
	public function registerCoreResource() {
		$coreScripts = lema()->config->resource['assets']['scripts'];
		$coreStyles  = lema()->config->resource['assets']['styles'];
		foreach ( $coreScripts as $script ) {
			wp_register_script( $script['id'], $script['url'], isset( $script['dependencies'] ) ? $script['dependencies'] : [], false, isset( $script['footer'] ) ? true : false );
			wp_enqueue_script( $script['id'] );
		}
		foreach ( $coreStyles as $style ) {
			wp_register_style( $style['id'], $style['url'], isset( $style['dependencies'] ) ? $style['dependencies'] : [] );
			wp_enqueue_style( $style['id'] );
		}
		$this->jsConfigs = lema()->hook->registerFilter( 'lema_js_configs', $this->jsConfigs );
		$this->configScript( 'lemaConfig', $this->jsConfigs );

		do_action( Hook::LEMA_AFTER_CORE_RESOURCES, $coreScripts );
		add_action( 'wp_print_footer_scripts', [ $this, 'release' ], PHP_INT_MAX );
		$this->release();
	}


	/**
	 * @param ResourceInterface $resource
	 *
	 * @return $this
	 */
	public function registerResource( ResourceInterface $resource, $force = false ) {
		self::$resources[ $resource->getId() ] = $resource;

		return $this;
	}

	/**
	 * Release the resource to wordpress
	 */
	public function release() {

		foreach ( self::$resources as $resource ) {
			/** ResourceInterface $resource */
			if ( $resource instanceof Script ) {
				if ( ! $resource->isInline() ) {
					wp_enqueue_script( $resource->getId(), $resource->getUrl(), $resource->getDependencies() );
				} else {
					wp_add_inline_script( $resource->getId(), $resource->inlineContent );
				}
			}
			/** ResourceInterface $resource */
			if ( $resource instanceof Style ) {
				if ( ! $resource->isInline() ) {
					wp_enqueue_style( $resource->getId(), $resource->getUrl(), $resource->getDependencies() );
				} else {
					wp_add_inline_style( $resource->getId(), $resource->inlineContent );
				}
			}
		}
		self::$resources = [];
	}

	/**
	 * @param array $scripts
	 *
	 * @return bool|string
	 */
	public function releaseScript( $scripts = [], $name = false ) {
		if ( $name ) {
			$hash = $name;
		} else {
			$hash = $this->getKeyMap( $scripts );
		}
		$jsFile = 'assets' . DIRECTORY_SEPARATOR . 'scripts' . DIRECTORY_SEPARATOR . $hash . '.min.js';
		$jsPath = LEMA_WR_DIR . DIRECTORY_SEPARATOR . $jsFile;
		if ( ! file_exists( $jsPath ) ) {
			$jsMinifier = new JS();
			foreach ( $scripts as $id => $url ) {
				//wp_dequeue_script($id);
				if ( is_array( $url ) ) {
					$path = $url[0];
				} else {
					$path = $this->convertUrlToPath( $url );
				}
				$jsMinifier->add( $path );
			}
			try {
				$assetDir = dirname( $jsPath );
				if ( ! is_dir( $assetDir ) ) {
					@mkdir( $assetDir, 0777, true );
				}
				$jsMinified = $jsMinifier->minify( $jsPath );
			} catch ( \Exception $e ) {
				lema()->logger->error( $e->getMessage() );
			}

		}
		if ( file_exists( $jsPath ) ) {
			$jsFile = 'assets/scripts/' . $hash . '.min.js'; // Now use URI instead of file path
			$jsUrl  = site_url() . '/wp-content/uploads/lema/' . $jsFile;

			return $jsUrl;
		}

		return false;
	}

	/**
	 * @param $styles
	 *
	 * @return bool|string
	 */
	public function releaseStyle( $styles, $name = false ) {
		if ( $name ) {
			$hash = $name;
		} else {
			$hash = $this->getKeyMap( $styles );
		}

		$cssFile = 'assets' . DIRECTORY_SEPARATOR . 'styles' . DIRECTORY_SEPARATOR . $hash . '.min.css';
		$cssPath = LEMA_WR_DIR . DIRECTORY_SEPARATOR . $cssFile;

		if ( ! file_exists( $cssPath ) ) {
			$cssMinifier = new CssMinifier();
			$cssMinifier->setImportExtensions( [] );
			$cssMinifier->setMaxImportSize( 0 );
			foreach ( $styles as $id => $url ) {
				//wp_dequeue_style($id);
				if ( is_array( $url ) ) {
					$path = $url[0];
				} else {
					$path = $this->convertUrlToPath( $url );
				}
				$cssMinifier->add( $path );
			}
			try {
				$assetDir = dirname( $cssPath );
				if ( ! is_dir( $assetDir ) ) {
					@mkdir( $assetDir, 0777, true );
				}
				$cssMinified = $cssMinifier->minify( $cssPath );
			} catch ( \Exception $e ) {
				lema()->logger->error( $e->getMessage() );
			}

		}
		if ( file_exists( $cssPath ) ) {
			$cssFile = 'assets/styles/' . $hash . '.min.css'; // Now use URI instead of file path
			$cssUrl  = site_url() . '/wp-content/uploads/lema/' . $cssFile;

			return $cssUrl;
		}

		return false;

	}

	/**
	 * @param $array
	 *
	 * @return string
	 */
	public function getKeyMap( $array ) {
		ksort( $array );
		$assetKeyMap  = '';
		$assetKey     = md5( serialize( array_keys( $array ) ) );
		$assetKeyMaps = lema()->cache->get( 'lema_asset_keymaps', [] );
		if ( array_key_exists( $assetKey, $assetKeyMaps ) ) {
			$assetKeyMap = $assetKeyMaps[ $assetKey ];
		} else {
			do {
				$assetKeyMap = lema()->helpers->general->getRandomString( 6 );
			} while ( array_key_exists( $assetKeyMap, $assetKeyMaps ) );
			$assetKeyMaps[ $assetKey ] = $assetKeyMap;
			lema()->cache->set( 'lema_asset_keymaps', $assetKeyMaps, 86400 * 365 );
		}

		return $assetKeyMap;
	}

	/**
	 * @param $url
	 *
	 * @return string
	 */
	private function convertUrlToPath( $url ) {
		$baseUrl = plugins_url( LEMA_NAME );

		return LEMA_PATH . DIRECTORY_SEPARATOR . ( str_replace( $baseUrl, '', $url ) );
	}

	/**
	 * @param $name
	 * @param $script
	 */
	public function configScript( $name, $script, $handle = 'lema' ) {
		lema()->wp->wp_localize_script( $handle, $name, $script );
	}

	/**
	 * Register a script to Assetmanager
	 *
	 * @param ScriptInterface $script
	 *
	 * @return mixed
	 */
	public function registerScript( ScriptInterface $script ) {
		return $this->registerResource( $script );
	}

	/**
	 * @param StyleInterface $style
	 *
	 * @return mixed
	 */
	public function registerStyle( StyleInterface $style ) {
		return $this->registerResource( $style );
	}

	/**
	 * @return ScriptInterface[]
	 */
	public function getRegisteredScripts() {
		// TODO: Implement getRegisteredScripts() method.
	}

	/**
	 * @return StyleInterface[]
	 */
	public function getRegisteredStyles() {
		// TODO: Implement getRegisteredStyles() method.
	}


	/**
	 * @param $id
	 * @param $data
	 */
	public function inlineScript( $id, $data ) {
		$this->inlineScripts[ $id ] = $data;
	}


	/**
	 * @param $post
	 */
	public function registerShortcodeAssets( $post ) {
		$shortcodes = lema()->shortcodeManager->getRegisteredShortcodes();

		foreach ( $shortcodes as $shortcode ) {
			if ( has_shortcode( $post->post_content, $shortcode->getId() ) ) {
				//$this->releaseShortcodeAssets($shortcode);
				wp_enqueue_style( 'lema-shortcodes' );
				wp_enqueue_script( 'lema-shortcodes' );

				return;
			}
		}

	}

	/**
	 * @param ShortcodeInterface $shortcode
	 */
	public function releaseShortcodeAssets( $shortcode ) {
		$resources = $shortcode->getResources();
		foreach ( $resources as $resource ) {
			/** @var ResourceInterface $resource */
			if ( $resource instanceof Script ) {
				wp_enqueue_script( $resource->getId() );
			} else {
				wp_enqueue_style( $resource->getId() );
			}
		}

	}

	/**
	 * @param $id
	 * @param ResourceInterface[] $scripts
	 * @param ResourceInterface[] $styles
	 */
	public function registerComponentAssets( $id, $scripts, $styles ) {
		foreach ( $scripts as $script ) {
			wp_register_script( $script->getId(), $script->getUrl(), $script->getDependencies() );

		}
		foreach ( $styles as $style ) {
			wp_register_style( $style->getId(), $style->getUrl(), $style->getDependencies() );
		}


	}
}
