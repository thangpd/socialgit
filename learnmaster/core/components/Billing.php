<?php
/**
 * @project  edu
 * @copyright Â© 2017 by ivoglent
 * @author ivoglent
 * @time  8/9/17.
 */


namespace lema\core\components;


use lema\core\BaseObject;

use lema\models\OrderModel;

/**
 * @property mixed $first_name
 * @property mixed $last_name
 * @property mixed $company
 * @property mixed $address_line1
 * @property mixed $address_line2
 * @property mixed $city
 * @property mixed $postcode
 * @property mixed $country
 * @property mixed $state
 * @property mixed $email
 * @property mixed $phone
 * @property mixed $payment
 * @property mixed $transaction_id
 */
class Billing extends BaseObject
{
    /**
     * @var array
     */
    private $data = [];
    /**
     * @var array
     */
    protected $attributes = [
        'first_name'                => 'First name',
        'last_name'                 => 'Last name',
        'company'                   => 'Company',
        'address_line1'             => 'Address line 1',
        'address_line2'             => 'Address line 2',
        'city'                      => 'City',
        'postcode'                  => 'Postcode',
        'country'                   => 'Country',
        'state'                     => 'State/County',
        'email'                     => 'Email address',
        'phone'                     => 'Phone',
        'payment'                   => 'Payment method',
        'transaction_id'            => 'Transaction ID',
    ];
    private $printableTemplate      = <<<EOF
    <strong>Address</strong> <br />
    {NAME}<br />
    {ADDRESS_LINE}<br /> 
    {CITY} <br />
    {COUNTRY}<br/>
    <br />
    <strong>Email address:</strong><br />
    {EMAIL} <br /><br />
    <strong>Phone :</strong><br>
    {PHONE}
    
EOF;

    /**
     * @return array
     */
    public function getAttributes()
    {
        return $this->attributes;
    }

    /**
     * Init
     * - Add a filter to allow wp can change this attributes
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->attributes = lema()->hook->registerFilter('lema_billing_attributes', $this->attributes);
        foreach ($this->attributes as $attribute => $label) {
            $this->data[$attribute] = null;
        }
        $this->printableTemplate = lema()->hook->registerFilter('lema_billing_printable_template', $this->printableTemplate);
    }

    /**
     * @param string $name
     * @return bool|mixed
     */
    public function __get($name)
    {
        if (in_array($name, array_keys($this->data))) {
            return $this->data[$name];
        }
        return false;
    }

    /**
     * @param string $name
     * @param mixed $value
     * @return $this|mixed
     */
    public function __set($name, $value)
    {
        if (array_key_exists($name, $this->attributes)) {
             $this->data[$name] = $value;
        }
        return $this;
    }

    /**
     * @param string $name
     * @return bool
     */
    public function __isset($name)
    {
        if (array_key_exists($name, $this->data)) {
            return true;
        }
        return parent::__isset($name); // TODO: Change the autogenerated stub
    }

    /**
     * @param $orderId
     * @return Billing
     */
    public static function loadByOrder($orderId){
        if (!is_object($orderId)) {
            if (is_numeric($orderId)) {
                $billObject = (object) lema()->wp->get_post_meta($orderId, 'billing_address', true);
            } else {
                if (lema()->helpers->general->canUnserialize($orderId)) {
                    $billObject = (object) unserialize($orderId);
                } else {
                    return new self();
                }
            }

        } else {
            $billObject = $orderId;
        }
        $billing = new self();
        foreach ($billing->getAttributes() as $attribute => $label) {
            if (!empty($billObject->{$attribute})){
                $billing->{$attribute} = $billObject->{$attribute};
            }

        }
        return $billing;
    }

    /**
     * Get all user billing
     * @param $userId
     * @return Billing[]
     */
    public static function loadByUser($userId)
    {
        global $wpdb;
        /** @var Billing[] $bills */
        $bills = [];
        $orders = $wpdb->get_results( $wpdb->prepare("SELECT post_id FROM $wpdb->postmeta WHERE meta_key = %s AND meta_value = %s order by meta_id DESC" , 'lema_order_user_id', $userId) );
        foreach ($orders as $meta) {
            $orderId = $meta->post_id;
            $billObject = lema()->wp->get_post_meta($orderId, 'billing_address', true);
            if(!is_object($billObject)) {
                if (is_string($billObject)) {
                    $billObject = (object) unserialize($billObject);
                } else {
                    $billObject = (object) $billObject;
                }

            }
            $billing = new self();
            foreach ($billing->getAttributes() as $attribute => $label) {
                $billing->{$attribute} = @$billObject->{$attribute};
            }
            $bills[] = $billing;
        }

        return $bills;
    }

    /**
     * Validate billing address
     */
    private function isEmpty()
    {
        return (empty($this->first_name) && empty($this->last_name) && empty($this->address_line1));
    }

    /**
     * @return mixed
     */
    public function getName()
    {
        return lema()->helpers->general->getPersonName($this->first_name, $this->last_name);
    }

    /**
     * Get value as array key value
     * @return array
     */
    public function getData()
    {
        return $this->data;
    }
    /**
     * @return string
     */
    public function _print()
    {
        if ($this->isEmpty()) {
            return __('No billing address found', 'lema');
        } else {
            $out = $this->printableTemplate;
            $template = [
                '{NAME}' => $this->getName(),
                '{ADDRESS_LINE}' => $this->address_line1, //. (!empty($this->address_line2) ? ', ' . $this->address_line2 : ''),
                '{CITY}'    => $this->city,
                '{COUNTRY}' => $this->country,
                '{EMAIL}'   => $this->email,
                '{PHONE}'   => $this->phone
            ];
            foreach ($template as $key => $value) {
                $out = str_replace($key, $value, $out);
            }
            //$out = str_replace(array_keys($template), array_values($template), $out);
            return $out;
        }
    }

    /**
     *
     */
    public function __toString()
    {
        return $this->_print();
    }

}