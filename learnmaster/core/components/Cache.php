<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 * @since 1.0
 */


namespace lema\core\components;


use Doctrine\Common\Cache\FilesystemCache;
use lema\core\BaseObject;
use lema\core\interfaces\ComponentInterface;


class Cache extends BaseObject implements ComponentInterface
{
    /**
     * @var \Doctrine\Common\Cache\Cache
     */
    protected $provider;
    /**
     * Cache directory
     * @var string
     */
    private $cacheDir;
    
    public function __construct(array $config = [])
    {
        parent::__construct($config);
        $this->cacheDir = $this->getCacheDir();
        $this->setProvider();
    }

    private function getCacheDir()
    {
        $data =  LEMA_WR_DIR . DIRECTORY_SEPARATOR.  'caches';
        $data = apply_filters('lema_dirs_cache', $data);
        return $data;
    }


    public function init()
    {
        $this->cacheDir = LEMA_PATH . '/caches';
        parent::init(); // TODO: Change the autogenerated stub

    }

    /**
     * Select provider from config
     * Default file cache is set
     */
    private function setProvider()
    {
        $cache = null;
        //Read config

        //Default
        if (empty($cache)) {
            $cache = new FilesystemCache($this->cacheDir);
        }

        $this->provider = $cache;

    }

    /**
     * Get a data to cache with expire time
     * @param $name
     * @param $value
     * @param int $exp
     */
    public function set($name, $value, $exp = 3600) {
        $name = $this->cacheMultiSite($name);
        $this->provider->save($name, $value, $exp);
    }

    /**
     * Check is data cached
     * @param $name
     * @return bool
     */
    public function is($name) {
        $name = $this->cacheMultiSite($name);
        return $this->provider->contains($name);
    }

    /**
     * Get data from cache
     * @param $name
     * @param mixed|null $default
     * @return mixed|null
     */
    public function get($name, $default = null)
    {
        $name = $this->cacheMultiSite($name);
        $result = $this->provider->fetch($name);
        if ($result ===  false) {
            $result = $default;
        }
        return $result;
    }

    /**
     * Delete stored cache
     * @param $name
     */
    public function delete($name) {
        $name = $this->cacheMultiSite($name);
        $this->provider->delete($name);
    }

    /**
     * Flush all stored cache
     */
    public function flushCache($section = 'all')
    {
        if ($section == 'all') {
            lema()->helpers->file->removeDir(lema()->helpers->general->fixPath($this->getCacheDir()));
        } else {
            lema()->wp->do_action("flush_{$section}_cache");
        }

    }

    /**
     * @param $shortcodeId
     */
    public function flushShortcodeCache($shortcodeId) {

    }


    /**
     * Set/get cache with callback function
     * @param $name
     * @param $callback
     * @return mixed|null
     */
    public function cache($name, $callback)
    {
        if ($this->is($name)) {
            return $this->get($name);
        }
        $data = $callback();
        $this->set($name, $data);
        return $data;
    }


    /**
     * Convert cache name to support WP multisite
     * @param string $name
     * @return string
     */
    private function cacheMultiSite($name)
    {
        if (is_multisite()) {
            $siteId = get_current_blog_id();
            $name = "site{$siteId}-{$name}";
        }
        return $name;
    }
}