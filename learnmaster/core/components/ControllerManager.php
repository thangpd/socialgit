<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 *
 * @since 1.0
 *
 */


namespace lema\core\components;



use lema\core\BaseObject;
use lema\core\interfaces\ComponentInterface;
use lema\core\interfaces\ControllerInterface;
use lema\core\interfaces\FrontControllerInterface;
use lema\core\interfaces\ResourceInterface;


class ControllerManager extends BaseObject implements ComponentInterface
{
    /**
     * Registered pages
     * @var array
     */
    protected $pages =['admin' => [], 'front' => []];

    protected $assets = [
        'css' => [],
        'js' => []
    ];

    /**
     * ControllerManager constructor.
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        parent::__construct($config);
        $this->registerChildController();
        add_action('wp_enqueue_scripts', [$this, 'registerControllerAssets']);
    }

    public function registerControllerAssets()
    {
        foreach ($this->assets as $type => $assets) {
            if ($type == 'css') {
                foreach ($assets as $option) {
                    $asset = new Style($option);
                    wp_register_style($asset->getId(), $asset->getUrl(), $asset->getDependencies());
                }
            } else {
                foreach ($assets as $option) {
                    $asset = new Script($option);
                    wp_register_script($asset->getId(), $asset->getUrl(), $asset->getDependencies(), false, true);
                }
            }
        }
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

    }
    /**
     * Register all controller
     * To implement wp hooks with owner routing
     */
    private function registerChildController(){
        $ctrlPos = [];
        if (defined('DOING_AJAX') && DOING_AJAX) {
            $ctrlPos = ['lema\extensions','lema\front', 'lema\admin'];
        } else {
            if (lema()->wp->is_admin()) {
                $ctrlPos = ['lema\admin'];
            } else {
                $ctrlPos =  ['lema\extensions','lema\front'];
            }
        }
        $cacheName = 'controller_maps_' . md5(serialize($ctrlPos)) . (lema()->wp->is_admin() ? '_admin' : '_front');
        /** @var ControllerInterface[] $controllers */
        $controllers = lema()->cache->get($cacheName, []);
        if (empty($controllers) || LEMA_DEBUG) {
            $controllers = lema()->helpers->file->findAllClass($ctrlPos, 'Controller',ControllerInterface::class);
            lema()->cache->set($cacheName, $controllers);
        }
        if (defined('DOING_AJAX')) {
            $controllers = lema()->hook->registerFilter('lema_admin_controllers', $controllers);
            $controllers = lema()->hook->registerFilter('lema_front_controllers', $controllers);

        } else {
            $controllers = lema()->hook->registerFilter('lema' . (lema()->wp->is_admin() ? '_admin' : '_front') . '_controllers', $controllers);
        }
        foreach ($controllers as $controller) {
            $params = $controller::registerAction();
            if (isset($params['actions']) && !empty($params['actions'])) {
                foreach ($params['actions'] as $action => $callable) {
                    $priority = 10;
                    $paramCount = 1;
                    if (isset($callable[2])) {
                        $priority = $callable[2];
                    }
                    if (isset($callable[3])) {
                        $paramCount = $callable[3];
                    }
                    $callback = [
                        $callable[0], $callable[1]
                    ];
                    lema()->wp->add_action($action, $callback, $priority, $paramCount);
                }
            }
            if (isset($params['ajax']) && !empty($params['ajax'])) {
                foreach ($params['ajax'] as $action => $callable) {
                    if (lema()->wp->is_user_logged_in()) {
                        lema()->wp->add_action('wp_ajax_' . $action, $callable);
                    } else {
                        lema()->wp->add_action('wp_ajax_nopriv_' . $action, $callable);
                    }
                }
            }
            if (isset($params['pages'])) {
                foreach ($params['pages'] as $type => $pages) {
                    foreach ($pages as $slug => $param) {
                        $pageParams = [$controller::className()];
                        if (!is_array($param)) {
                            $pageParams[] = $param;
                        } else {
                            $pageParams = array_merge($pageParams, $param);
                        }
                        $this->pages[$type][$slug] = $pageParams;
                    }
                }

            }
            if (isset($params['assets'])) {
                foreach ($params['assets'] as $type => $param) {
                    $this->assets[$type] = array_merge($this->assets[$type], array_values($param));
                }
            }
        }
        lema()->wp->add_action('admin_menu', [$this, 'registerPage']);
        lema()->hook->listenFilter('lema_front_page', [$this, 'frontPages']);

    }


    /**
     * @param $pages
     * @return array
     */
    public function frontPages($pages)
    {
        return array_merge($pages, $this->pages['front']);
    }



    /**
     * Register page with wordpress
     */
    public function registerPage()
    {
        foreach ($this->pages['admin'] as $slug => $page) {
            add_submenu_page(isset($page['parent']) ? $page['parent'] : '' ,$page['title'], $page['menu'], $page['capability'], $slug, $page['action']);
        }
    }

}
