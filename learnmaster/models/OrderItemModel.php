<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 *
 * @since 1.0
 *
 */


namespace lema\models;


use lema\core\BaseObject;
use lema\core\interfaces\CacheableInterface;
use lema\core\interfaces\MigrableInterface;
use lema\core\interfaces\ModelInterface;

use lema\core\Model;

/**
 * @property int $id
 * @property int $order_id
 * @property int $course_id
 * @property int $quantity
 * @property float $subtotal
 * @property string $data
 */
class OrderItemModel extends Model implements ModelInterface, CacheableInterface, MigrableInterface
{

    const CACHE_PREFIX          = 'lema_order_item_';
    const TABLE_NAME            = 'lema_order_item';
    /**
     * If this object able to cache, it needs provider owner cache name
     * @return mixed
     */
    public function getCahename()
    {
        return self::CACHE_PREFIX . $this->id;
    }

    /**
     * Flush owner cache to refresh data
     * @return mixed
     */
    public function flushCache()
    {
        // TODO: Implement flushCache() method.
    }

    /**
     * Run this function when plugin was activated
     * We need create something like data table, data roles, caps etc..
     * @return mixed
     */
    public function onActivate()
    {
        global $wpdb;
        $tableName =  $this->getName();
        if ( !in_array($tableName, $wpdb->tables)) {
            $charset_collate = $wpdb->get_charset_collate();
            $sql = "CREATE TABLE `$tableName` (
                         `id` int(11) NOT NULL AUTO_INCREMENT,
                         `order_id` int(11) NOT NULL,
                         `course_id` int(11) NOT NULL,
                         `quantity` int(11) NOT NULL DEFAULT '1',
                         `subtotal` float(11) NOT NULL,
                         `data` text CHARACTER SET utf8,
                         PRIMARY KEY (`id`),
                         KEY `orderitem_order_id_index` (`order_id`),
                         KEY `orderitem_product_index` (`course_id`)
                ) $charset_collate;";

            require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );
            dbDelta( $sql );
        }
    }

    /**
     * Run this function when plugin was deactivated
     * We need clear all things when we leave.
     * Please be a polite man!
     * @return mixed
     */
    public function onDeactivate()
    {

    }

    /**
     * Run if current version need to be upgraded
     * @param string $currentVersion
     * @return mixed
     */
    public function onUpgrade($currentVersion)
    {
        if (version_compare($currentVersion, '1.0.1', '<')) {

        }
    }

    /**
     * @return mixed
     * example :
     * return [
     *    'name' => [
     *        'label' => 'Name',
     *        'validate' => ['text', ['length' => 200, 'required' => true, 'message' => 'Please enter a valid name']]
     *    ],
     *    'age' => [
     *        'label' => 'Age',
     *        'validate' => ['number', ['max' => 100, 'min' => 0, 'message' => 'Please enter a valid age']]
     *    ]
     * ]
     */
    public function getAttributes()
    {
        return [
            'id' => [
                'label' => 'Rating ID'
            ],
            'order_id'  => [
                'label'     => 'Order ID'
            ],
            'course_id'     => [
                'lable'     => 'Course ID'
            ],
            'quantity'       => [
                'label'     => 'Quantity'
            ],
            'subtotal'          => [
                'label'         => 'Subtotal'
            ],
            'data'      => [
                'label'     => 'Additional data'
            ]
        ];
    }

    /**
     * Abstract function get name of table/model
     * @return mixed
     */
    public function getName()
    {
        return self::getTableName();
    }

    /**
     * @param mixed $conds
     * @param string $tableName
     * @return ModelInterface[]
     */
    public static function find($conds, $tableName = '')
    {
        $tableName = self::getTableName();
        return parent::find($conds, $tableName); // TODO: Change the autogenerated stub
    }

    /**
     * Get table name of this model
     * @return string
     */
    public static function getTableName()
    {
        global $wpdb;
        return $wpdb->prefix . self::TABLE_NAME;
    }

    /**
     * @param $id
     * @return array|null|RatingModel
     */
    public static function findOne($id)
    {
        global $wpdb;
        $tableName = self::getTableName();
        $result = $wpdb->get_results($wpdb->prepare("SELECT * FROM {$tableName} WHERE id = %d", $id));
        if (!empty($result)) {
            $result = array_shift($result);
            $model = new self();
            $model->isNew = false;
            $attributes = $model->getAttributes();
            foreach (array_keys($attributes) as $key)
            {
                $model->{$key} = $result->{$key};
            }
            return $model;
        }
        return null;
    }



    /**
     * Save object properties to database
     * @return boolean
     */
    public function save()
    {
        global $wpdb;
        // TODO: Implement save() method.

        if ($this->isNew) {
            //Check if order item currently exists. Just update quantity
            $item = self::find([
                'order_id' => $this->order_id,
                'course_id' => $this->course_id
            ]);
            if (!empty($item)) {
                $item = array_shift($item);
                $price = $item->subtotal / $item->quantity;
                $this->quantity =  $item->quantity + $this->quantity;
                $this->subtotal = $price * $this->quantity;
                $this->id = $item->id;
                $this->data = $item->data;
                $this->isNew = false;
            }
        }
        if ($this->isNew) {
            $course = CourseModel::findOne($this->course_id);
            if ($course) {
                /** @var CourseModel $course */
                $this->subtotal = $this->quantity * $course->getPrice();
            } else {
                return false;
            }
        }

        $attributes = array_keys($this->getAttributes());
        $data = [];
        foreach ($attributes as $attribute)
        {
            $data[$attribute] = $this->{$attribute};
        }
        if ($this->isNew) {
            $result = $wpdb->insert($this->getName(), $data);
        } else {
            $result = $wpdb->update($this->getName(), $data, [
                'id' => $this->id
            ]);
        }
        lema()->hook->registerHook("after_order_item_changed", $this->order_id);
        return $result;

    }

    /**
     * @return bool|ModelInterface|Model
     */
    public function getCourse()
    {
        return CourseModel::findOne($this->course_id);
    }


    /**
     * Delete a object by primary key
     * @return boolean
     */
    public function delete()
    {
        // TODO: Implement delete() method.
        global $wpdb;
        $result = $wpdb->delete(self::getTableName(), ['id' => $this->id]);
        lema()->hook->registerHook("after_order_item_changed", $this->order_id);
        return $result;
    }

    /**
     * @return mixed
     */
    public static function getPosttypeConfig()
    {
        return [];
    }


    /**
     * Override current behavior after model was saved
     * @param $postId
     * @return mixed
     */
    public function afterSave($postId, $post = null, $update = false) {
        return false;
    }


    /**
     * @param int $limit
     * @return array|null|object
     */
    public static function getTopSales($limit = 10)
    {
        global $wpdb;
        $table = self::getTableName();
        $query = $wpdb->prepare("SELECT course_id, sum(a.quantity) total FROM {$table} a GROUP BY a.course_id ORDER BY total DESC LIMIT %d", $limit);
        return $wpdb->get_results($query);
    }

	/**
	 * check user enrolled course
	 */
	public static function checkUserEnrolledCourse( $courseId, $studentId ) {
		global $wpdb;
		$table      = self::getTableName();
		$field      = 'lema_order_user_id';
		$fielResult = 'a.order_id';
		$orderIds   = [];

		$query = $wpdb->prepare( "SELECT {$fielResult} FROM {$table} a JOIN $wpdb->postmeta b on a.order_id=b.post_id and a.course_id=%d and b.meta_key=%s and b.meta_value=%d;", $courseId, $field, $studentId );
		$rows  = $wpdb->get_results( $query );
		if ( count( $rows ) > 0 ) {
			foreach ( $rows as $row ) {
				$expired = get_post_meta( $row->order_id, 'order_expire_date', true );
				if ( ! empty( $expired ) ) {
					$expired = new \DateTime( $expired );
					$today   = new \DateTime( 'now' );
					if ( $expired > $today ) {
						$orderIds[] = $row->order_id;
					}
				} else {
                    $orderIds[] = $row->order_id;
                    
				}
			}

			if ( ! empty( $orderIds ) ):
				$orderIds = implode( ',', $orderIds );
				$query    = 'SELECT count(meta_id) total FROM ' . $wpdb->postmeta . " WHERE post_id IN ({$orderIds}) AND meta_value = " . OrderModel::ORDER_STATUS_COMPLETED;
				$rows     = $wpdb->get_results( $query );
				if ( count( $rows ) > 0 ) {
					$row = array_shift( $rows );
					return $row->total;
				}
			endif;
		}

		return false;
	}

	/**
     * Run when learn master was uninstalled
     * @return mixed
     */
    public function onUninstall()
    {
        global $wpdb;
        $tableName =  $this->getName();
        try {
            $wpdb->query("DROP TABLE {$tableName}");
        } catch (\Exception $e) {

        }
    }
}