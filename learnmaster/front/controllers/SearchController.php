<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 *
 * @since 1.0
 *
 */



namespace lema\front\controllers;


use lema\core\components\Style;
use lema\core\components\Script;
use lema\core\interfaces\FrontControllerInterface;


class SearchController extends FrontController implements FrontControllerInterface
{

    const MAX_ITEMS_SHOW = 5;
    /**
     * @var array
     */
    public $sortables = [];
    /**
     * @var array
     */
    public $sorttypes = [];
    /**
     * @var array
     */
    public $filters = [];
	/**
     * @var array
     */
    public $course_type= [];



	public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub


        $this->sortables = [
            'date_desc' => __('Newest - Oldest', 'lema'),
            'date_asc' => __('Oldest - Newest', 'lema'),

            'review_desc' => __('Most Reviewed', 'lema'),

            // 'relevant_desc' => __('Most Relevent', 'lema'),

            'rate_desc' => __('Rate: Hight - Low', 'lema'),
            'rate_asc' => __('Rate: Low - Hight', 'lema'),

            '__course_price_desc' => __('Price: Hight - Low', 'lema'),
            '__course_price_asc' => __('Price: Low - Hight', 'lema'),

            'title_asc' => __('Title: A - Z', 'lema'),
            'title_desc' => __('Title: Z - A', 'lema'),
        ];
        $this->sortables = lema()->hook->registerFilter('lema_search_sorting', $this->sortables);
        $this->sorttypes = [
            'asc' => __('Ascending', 'lema'),
            'desc' => __('Descending', 'lema'),
        ];
	    $this->course_type = [ 'all'    => __( 'All', 'lema' ),
	                           'paid'   => __( 'Paid', 'lema' ),
	                           'sale'   => __( 'Sale', 'lema' ),
	                           'free'   => __( 'Free', 'lema' ),
	                           'bundle' => __( 'Bundle', 'lema' ),
	                           'course' => __( 'Course', 'lema' )
	    ];

    }

	/**
     * @param $terms
     * @param $tax
     * @param $query
     * @param $termQuery
     * @return mixed
     */
    public function modifyTermCount($terms, $tax, $query, $termQuery)
    {
        global $wpdb;
        //foreach ($terms as &$term) { $term->count = 0; };

        return $terms;
    }

	/**
     * Get default term filter
     * @return array
     */
    private function getDefautTermFilters()
    {
    	$arr=[
		    //'cat_course' =>  __('Category', 'lema'),
		    'tag_course' =>  __('Topic', 'lema'),
		    'level_course' => __('Level', 'lema'),
		    'language_course' => __('Language', 'lema')
	    ];
        return apply_filters('default_term_filter_searchpage',$arr);
    }

	/**
     * @param $name
     */
    private function filteredTerm($name)
    {
        $cacheName = 'lema_search_tax_' . $name;
        $terms = lema()->cache->cache($cacheName, function () use ($name){
            return get_terms($name);
        });
        $courseFilter = isset($_GET) ? $_GET : [];
        $change = isset($_GET['change']) ? $_GET['change'] : '';
        if (preg_match('/^courseFilter\[(.*?)\]/', $change, $match)) {
            $change = $match[1];

        }
        $defaultTerms = $this->getDefautTermFilters();
        $termIds = [];
        $taxs = [];

        foreach ($_GET as $key => $value) {
            if (array_key_exists($key, $defaultTerms)) {
                $taxs[] = $key;

                if (!isset($termIds[$key])) {
                    $termIds[$key] = [];
                }

                $list_value = explode(',', $value);
                if($list_value){
                    foreach ($list_value as $v) {
                        $termIds[$key][] = $v;
                    }
                }
            }
        }
        foreach ($terms as &$term) {
            $_termIds = $termIds;
            /** @var \WP_Term $term */
            /* if (array_key_exists($term->taxonomy, $_termIds)){
                 if (in_array($term->term_id, $_termIds[$term->taxonomy])) {
                     continue;
                 }
             }*/
            $args = [
                'post_type' => 'course'
            ];
            $args['tax_query'] = ['relation' => 'AND'];
            //if (array_key_exists($term->taxonomy, $_termIds)) {
            if ($term->taxonomy == $change) {
              /*  if (!in_array($term->term_id, $_termIds[$term->taxonomy])) {
                    $_termIds[$term->taxonomy][] = $term->term_id;
                } else*/
                continue;
            } else {
                $_termIds[$term->taxonomy] = [];
                $_termIds[$term->taxonomy][] = $term->term_id;
            }

            if (!empty($_termIds)) {
                foreach ($_termIds as $tax => $ids) {
                    $query = array(
                        'taxonomy' => $tax,
                        'field' => 'term_id',
                        'terms' => $ids,
                        'include_children' => false,
                        'operator' => 'IN'
                    );
                    $args['tax_query'][] = $query;
                }
                if (isset($_GET['q']) && !empty($_GET['q'])) {
                    $args['s'] = $_GET['q'];
                }
                $args['post_status'] = 'publish';
                $result = new \WP_Query($args);
                $term->count = $result->found_posts;
            }
        }
        lema()->cache->set($cacheName, $terms);
        return $terms;
    }

	/**
     * @return array|mixed
     */
    public function getFilters()
    {
        lema()->hook->listenFilter('get_terms', [$this, 'modifyTermCount'], 10, 4);
        $filters = [];
        foreach ($this->getDefautTermFilters() as $term => $label) {
            $filters[$term] = [
                'label' => $label,
                'type' => 'term',
                'options' => $this->filteredTerm($term)
            ];
        }
        $this->filters = lema()->hook->registerFilter('lema_search_filters', $filters);
        return $this->filters;
    }
	/**
	 * Apply filters and response list of course results
	 */
	public function applyFilter()
	{
		$courseFilter = isset($_GET) ? $_GET : [];
		$filters = $this->getFilters();
		$data = [
			'courseFilter' => $courseFilter,
			'sortables' => $this->sortables,
			'sorttypes' => $this->sorttypes,
			'filters' => $filters,
			'maxItems' => self::MAX_ITEMS_SHOW,
		];
		$html = $this->render('_result', $data, true);

		$filterHtml = $this->render('_filter', $data, true);

		return $this->responseJson([
			'data' => $html,
			'filters' => $filterHtml
		]);

	}
	/**
     * @return string
     */
    public function renderHTML()
    {
        $filters = $this->getFilters();
        $courseFilter = isset($_GET) ? $_GET : [];
        //s$categories = lema()->helpers->wp->getCategoryTree();
        
        return $this->render('index', [
            'filters' => $filters,
            'courseFilter' => $courseFilter,
            'sortables' => $this->sortables,
            'sorttypes' => $this->sorttypes,
            'maxItems' => self::MAX_ITEMS_SHOW,
	        //'categories' => $categories
        ]);

    }

    /**
     * Register all actions that controller want to hook
     * @return mixed
     */
    public static function registerAction()
    {
        $searchUrl = lema()->config->getUrlConfigs('lema_search');
        $title=apply_filters('initTitleLemaSearch',esc_html__('Search result','lema'));
        return [
            'pages' => [
                'front' => [
                    $searchUrl => ['renderHTML', [
                        'db' => false,
                        'title' => $title,
                    ]],
                ]
            ],
            'ajax' => [
                'lema_apply_course_filter' => [
                    self::getInstance() , 'applyFilter'
                ]
            ],
            'assets' => [
                'css' => [
                    [
                        'id' => 'style',
                        'isInline' => false,
                        'url'   => '/front/assets/css/style.css'
                    ],
                    [
                        'id' => 'layout',
                        'isInline' => false,
                        'url'   => '/front/assets/css/layout.css'
                    ],
                    [
                        'id' => 'course-filter',
                        'isInline' => false,
                        'url'   => '/front/assets/css/course-filter.css'
                    ],
                    [
                        'id' => 'tab-filter',
                        'isInline' => false,
                        'url'   => '/front/assets/css/tab-filter.css'
                    ],
                    [
                        'id' => 'advanced-search',
                        'isInline' => false,
                        'url'   => '/front/assets/css/advanced-search.css'
                    ],
                    [
                        'id' => 'course-autocomplete-search',
                        'isInline' => false,
                        'url'   => '/front/assets/css/course-autocomplete-search.css'
                    ]

                ],
                'js' => [
                    [
                        'id' => 'search-page',
                        'isInline' => false,
                        'url'   => '/front/assets/js/search.js',
                        'dependencies' => ['lema', 'lema.ui']
                    ]
                ]
            ]
        ];
    }

}
