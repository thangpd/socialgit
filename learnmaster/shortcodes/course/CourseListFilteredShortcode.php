<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 *
 * @since 1.0
 *
 */


namespace lema\shortcodes\course;


use lema\core\interfaces\ShortcodeInterface;
use lema\core\Shortcode;
use lema\models\CourseModel;

class CourseListFilteredShortcode extends CourseListShortcode implements ShortcodeInterface
{

    const SHORTCODE_ID = 'lema_courselist_filtered';

    /**
     * Get Id of shortcode
     * @return string
     */
    public function getId()
    {
        // TODO: Implement getId() method.
        return self::SHORTCODE_ID;
    }

    /**
     * @return array
     */
    public function getAttributes()
    {
        $attrbutes = parent::getAttributes(); // TODO: Change the autogenerated stub

        return array_merge($attrbutes, [
            'level_course' => '',
            'language_course' => '',
            'tag_course' => '',
            'cat_course' => '',
            'layout' => 'list',
            'summary' => 0,
            'sort_type' => 'desc',
            'sort_by' => 'title',
            'q' => '',
            'page_url' => 1,
            'subfilter' => '',
        ]);
    }

    /**
     * filter by rate
     *
     * @param  [type] $clauses [description]
     * @param  [type] $query   [description]
     *
     * @return [type]          [description]
     */
    public function filter_by_rate($clauses, $query)
    {
        global $wpdb;

        if (isset($query->query['orderby']) && 'rate' == $query->query['orderby']) {
            $ratingTable = $wpdb->prefix . \lema\models\RatingModel::TABLE_NAME;
            $clauses['join'] .= "LEFT JOIN {$ratingTable} ON {$wpdb->posts}.ID={$ratingTable}.object_id";
            $clauses['groupby'] = "{$wpdb->posts}.ID";
            $clauses['orderby'] = "SUM({$ratingTable}.rate)/count({$ratingTable}.ID) " . $query->query['order'];
        }

        return $clauses;
    }

    /**
     * filter by review
     *
     * @param  [type] $clauses [description]
     * @param  [type] $query   [description]
     *
     * @return [type]          [description]
     */
    public function filter_by_review($clauses, $query)
    {
        global $wpdb;

        if (isset($query->query['orderby']) && 'review' == $query->query['orderby']) {
            $ratingTable = $wpdb->prefix . \lema\models\RatingModel::TABLE_NAME;
            $clauses['join'] .= "LEFT JOIN {$ratingTable} ON {$wpdb->posts}.ID={$ratingTable}.object_id";
            $clauses['groupby'] = "{$wpdb->posts}.ID";
            $clauses['orderby'] = "count({$ratingTable}.ID) " . $query->query['order'];
        }

        return $clauses;
    }

    public function all_course_purchased()
    {

        $res_course_id = [];
        $current_user = wp_get_current_user();
        $user_purchased_course = get_posts(array(
            'meta_key' => '_customer_user',
            'meta_value' => $current_user->ID,
            'post_type' => wc_get_order_types(),
            'post_status' => array('wc-processing', 'wc-completed'),

            'numberposts' => -1,
        ));
        if (!$user_purchased_course) {
            return;
        }
        $product_ids = array();
        foreach ($user_purchased_course as $customer_order) {
            $order = new \WC_Order($customer_order->ID);
            $items = $order->get_items();
            foreach ($items as $item) {
                $product_id = $item->get_product_id();
                $product_ids[] = $product_id;
            }
        }
        $product_ids = array_unique($product_ids);
        foreach ($product_ids as $product_id) {
            $product = explode('_', wc_get_product($product_id)->get_sku());
            if ($product[0] == CourseModel::COURSE_SLUG) {
                $res_course_id[] = $product[1];
            }
        }

        return $res_course_id;

    }


    /**
     * @param $data
     *
     * @return array
     */
    public function getQuery($data)
    {
        $query = [
            'post_type' => 'course'
        ];
        if (!empty($data->q)) {
            $query['s'] = $data->q;
        }
        $query['tax_query'] = [];
        $terms = [
            'cat_course',
            'tag_course',
            'level_course',
            'language_course'
        ];

        foreach ($terms as $term) {
            if (!empty($data->$term)) {
                $ids = explode(',', $data->$term);
                $query['tax_query'][] = array(
                    'taxonomy' => $term,
                    'field' => 'term_id',
                    'terms' => $ids,
                    'include_children' => false,
                    'operator' => 'IN'
                );
            }
        }
        $query['tax_query']['relation'] = 'AND';
        $query['order'] = $data->sort_type;

        preg_match('/(.+)_(asc|desc)$/', $data->sort_by, $sort_type);

        if ($sort_type) {
            $query['order'] = strtoupper($sort_type[2]);
            if (empty($sort_by)) {
                switch ($sort_type[1]) {
                    case 'rate':
                        $query['orderby'] = 'rate';
                        add_filter('posts_clauses', [$this, 'filter_by_rate'], 10, 2);
                        break;
                    case 'relevant':
                        # code...
                        break;
                    case 'review':
                        $query['orderby'] = 'review';
                        add_filter('posts_clauses', [$this, 'filter_by_review'], 10, 2);
                        break;
                    default :
                        $sort_by = $sort_type[1];
                        if (preg_match('/^__/', $sort_by)) {
                            $query['orderby'] = 'meta_value_num';
                            $query['meta_key'] = str_replace('__', '', $sort_type[1]);
                            if (isset($data->subfilter) && $data->subfilter == 'free') {
                                $query['meta_value'] = 0;
                            }
                        } else {
                            $query['orderby'] = $sort_type[1];
                        }
                }
            }
        }
        switch ($data->subfilter) {
            case 'free':
                $query['meta_key'] = CourseModel::COURSE_REGULAR_PRICE;
                $query['meta_value'] = 0;
                break;
            case 'sale':
                $query['meta_query'] = array(
                    array(
                        'key' => CourseModel::COURSE_SALE_PRICE,
                        'value' => array(''),
                        'compare' => 'NOT IN'
                    )
                );
                break;
            case 'paid':
                if (class_exists('WooCommerce')) {
                    $post__in = $this->all_course_purchased();
                    if (!empty($post__in)) {
                        $query['post__in'] = $post__in;
                    } else {
                        return array();
                    }
                }
                break;
        }
        $query = lema()->hook->registerFilter('lema_course_filtered_query', $query);

        return $query;
    }
}