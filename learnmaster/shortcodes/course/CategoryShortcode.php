<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 *
 * @since 1.0
 *
 */

namespace lema\shortcodes\course;

use lema\core\components\payment\Paypal;
use lema\core\interfaces\CacheableInterface;
use lema\core\Shortcode;


class CategoryShortcode extends Shortcode {
	const SHORTCODE_ID = 'lema_course_category';
	const CATEGORY_TYPE_BOX = 'box';
	const CATEGORY_TYPE_TABS = 'tabs';
	const DEFAULT_ICON_CLASS = '';
	const MAX_DEPTH = 3;

	const DEFAULT_STYLE = self::CATEGORY_TYPE_BOX;

	public $contentView = 'category';

	/**
	 * Get Id of shortcode
	 * @return string
	 */
	public function getId() {
		return self::SHORTCODE_ID;
	}

	/**
	 * @param array $data
	 * @param array $params
	 *
	 * @return string
	 */
	public function getShortcodeContent( $data = [], $params = [], $key = '' ) {
		$type = self::DEFAULT_STYLE;
		if ( isset( $data['type'] ) ) {
			$type = $data['type'];
		}
		switch ( $type ) {
			case self::CATEGORY_TYPE_BOX :
				$this->contentView = 'category-box';
				break;
			case self::CATEGORY_TYPE_TABS :
				$this->contentView = 'category-tabs';
				break;

		}

		return parent::getShortcodeContent( $data, $params ); // TODO: Change the autogenerated stub
	}

	/**
	 * Register static resource
	 */
	public function getStatic() {
		return [
			[
				'type'         => 'script',
				'id'           => 'lema-category-script',
				'isInline'     => false,
				'url'          => 'assets/scripts/lema-category.js',
				'dependencies' => [ 'lema', 'lema.shortcode' ]
			],
			[
				'type'         => 'style',
				'id'           => 'lema-category-style',
				'isInline'     => false,
				'url'          => 'assets/styles/lema-category.css',
				'dependencies' => [ 'lema-shortcode-style' ],
			],
		];
	}

	/**
	 * @return array
	 */
	public function getAttributes() {
		return [
			'type'       => self::DEFAULT_STYLE, //list
			'icon-class' => self::DEFAULT_ICON_CLASS,
		];
	}

	/**
	 * Build Menu
	 *
	 * @param $data
	 * @param array $categories
	 * @param int $depth
	 */
	public function buildMenu( $data, $categories = array(), $depth = 0 ) {
		if ( $depth == self::MAX_DEPTH ) {
			return;
		}
		foreach ( $categories as $category ) {
			$item_class = 'cate-item';
			$icon_class = $data['icon-class'];
			if ( ! empty( $icon_class ) ) {
				$item_class .= ' has-icon';
			}
			if ( $category->hasChildren() ) {
				$item_class .= ' has-sub';
			}
			?>
            <li class="<?php echo $item_class; ?>">
                <a href="<?php echo $category->permalink(); ?>" class="link">
                	<?php echo $category->icon( $icon_class, true ); ?>
                	<span class="cate-text"><?php echo $category->name; ?></span>
				</a>
				<?php if ( $category->hasChildren() ): ?>
                    <span class="arrow-has-sub"></span>
                    <div class="sub-cate">
                        <ul class="cate-sub-list">
							<?php $this->buildMenu( $data, $category->getChildren(), $depth + 1 ); ?>
                        </ul>
                    </div>
				<?php endif; ?>
            </li>
			<?php
		}
	}

}