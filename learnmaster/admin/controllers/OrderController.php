<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 *
 * @since 1.0
 *
 */

namespace lema\admin\controllers;


use lema\core\components\Form;
use lema\core\components\Hook;
use lema\core\interfaces\ControllerInterface;

use lema\models\OrderItemModel;
use lema\models\OrderModel;

class OrderController extends AdminController implements ControllerInterface
{

    /** @var  OrderModel */
    private $order;
    /** @var  Form */
    private $form;

    private $customColumns = [
        'student'  => 'Student',
        'status'    => 'Order status',
        'total'     => 'Total value',
        'post_date' => 'Created time',
        'expire_date' => 'Expire time'
    ];



    public function __init()
    {
        global $post;
        lema()->hook->listenFilter('manage_lema_order_posts_columns', [$this, 'orderColumns']);
        lema()->hook->listenFilter('post_row_actions', [$this, 'removeOrderActions']);
        $this->customColumns = lema()->hook->registerFilter('lema_order_list_columns', $this->customColumns);
        lema()->hook->listenHook('manage_lema_order_posts_custom_column', [$this, 'renderCustomColumns']);
        if (get_post_type() != 'lema_order') return;
        parent::init(); // TODO: Change the autogenerated stub
        lema()->hook->listenHook(Hook::LEMA_AFTER_CORE_RESOURCES, [$this, 'registerAssets']);
        lema()->hook->listenFilter('title_save_pre', [$this, 'autoOrderTitle']);


    }

    /**
     * Remove unnecessary action in order list
     * @param $actions
     */
    public function removeOrderActions($actions)
    {
        if( get_post_type() === 'lema_order' ){
            unset( $actions['view'] );
            unset( $actions['inline hide-if-no-js'] );
        }

        return $actions;
    }

    /**
     * Show custom columns content
     * @param $column
     * @param $post_id
     */
    public function renderCustomColumns($column, $post_id = '')
    {
        global $post;
        $order = OrderModel::findOne($post);
        if (in_array($column, array_keys($this->customColumns))) {
            switch ($column) {
                case 'student' :
                    $user = get_user_by('ID', $order->lema_order_user_id);
                    if (!empty($user)) {
                        echo $user->display_name;
                    } else {
                        echo __('Guest', 'lema');
                    }
                    break;
                case 'status' :
                    echo OrderModel::statusLabels($order->order_status);
                    break;
                case 'total' :
                    echo $order->formatTotal();
                    break;
                case 'post_date' :
                    echo $post->post_date;
                    break;
	            case 'expire_date' :
		            echo get_post_meta( $order->ID, OrderModel::ORDER_EXPIRABLE,true );
		            break;
            }
        }
    }

    /**
     * Change title from auto save
     * @param $title
     */
    public function autoOrderTitle($title) {
        global $post;
        if (get_post_type() == 'lema_order') {
            if (empty($this->order->post)) {
                $this->order->loadPost($post);
            }
            if (!empty($this->order->post)) {
                $title = 'Order #' . $this->order->post->ID;
            } else {
                $title = '#Order ' . date('Y-m-d H:i:s');
            }
        }
        return $title;
    }

    public function orderColumns($columns)
    {
        unset($columns['date']);
        $columns = array_merge($columns, $this->customColumns);
        $columns['date'] = 'Modified';
        return $columns;
    }


    /**
     * Register some necessary assets
     */
    public function registerAssets()
    {
        lema()->wp->wp_enqueue_style('select2-style');
        lema()->wp->wp_enqueue_script('select2');
    }

    /**
     * Add general section
     * @param $post
     * @param $box
     * @param bool $return
     * @return string
     */
    public function addMetaBoxGeneral($post, $box, $return = false)
    {
        if (isset($_GET['post'])) {
            $this->order = OrderModel::findOne($_GET['post']);
        } else {
            $this->order = new OrderModel();
        }
        $this->form = new Form();
        $this->form->bind($this->order);
        return $this->render('form', ['order' => $this->order, 'form' => $this->form]);
    }

    /**
     * Add order user section
     * @param $post
     * @param $box
     * @param bool $return
     * @return string
     */
    public function addMetaBoxUser($post, $box, $return = false)
    {
        return $this->render('user', ['order' => $this->order, 'form' => $this->form], $return);
    }

    /**
     * Add order items section
     * @param $post
     * @param $box
     * @param bool $return
     * @return string
     */
    public function addMetaBoxItem($post, $box, $return = false)
    {
        return $this->render('item', ['order' => $this->order, 'form' => $this->form], $return);
    }

    /**
     * Add sections of order page
     */
    public function initMetaBox()
    {
        global $post;
        lema()->wp->add_meta_box(
            'add_edit_order_general',
            'General',
            [self::getInstance(),'addMetaBoxGeneral'],
            'lema_order',
            'normal',
            'high'
        );
        lema()->wp->add_meta_box(
            'add_edit_order_user',
            'Student',
            [self::getInstance(),'addMetaBoxUser'],
            'lema_order',
            'normal',
            'high'
        );
        lema()->wp->add_meta_box(
            'add_edit_order_item',
            'Items',
            [self::getInstance(),'addMetaBoxItem'],
            'lema_order',
            'normal',
            'high'
        );
    }

    /**
     * Disable auto save for this post type
     */
    public function disableAutosave()
    {
        if ( 'lema_order' == get_post_type() )
            wp_dequeue_script( 'autosave' );
    }

    public function addUser()
    {
        $response = [];
        if (isset($_POST['order_id']) && $_POST['LemaOrder']) {
            $orderId = $_POST['order_id'];
            $lemaOrder = $_POST['LemaOrder'];
            if (!empty($lemaOrder['lema_order_user_id'])) {
                lema()->wp->update_post_meta($orderId, 'lema_order_user_id', $lemaOrder['lema_order_user_id']);
                $this->order = OrderModel::findOne($orderId);
                $this->form = new Form();
                $this->form->bind($this->order);
                $response = [
                    'data' =>  $this->addMetaBoxUser(null, null,true)
                ];
            }
        }
        return $this->responseJson($response);
    }
    /**
     * Add one item to current order
     * POST params :
     * order_id
     * course_id
     * quantity
     */
    public function addItem()
    {
        $order_id = @$_POST['order_id'];
        if ($order_id) {
            if (isset($_POST['course_id']) && isset($_POST['quantity'])) {
                $courseId = $_POST['course_id'];
                $quantity = $_POST['quantity'];
                self::add_item_to_order($order_id,$courseId,$quantity);
            }
            $this->order = OrderModel::findOne($order_id);
            $this->form = new Form();
            $this->form->bind($this->order);
            $html = $this->addMetaBoxItem(null, null , true);
            $this->responseJson([
                'data' => $html
            ]);
        }
    }

	/**
	 * Add add_item_to_order
	 */
	public static function add_item_to_order( $order_id, $courseId, $quantity ) {
		$item            = new OrderItemModel();
		$item->course_id = $courseId;
		$item->order_id  = $order_id;
		$item->quantity  = $quantity;
		$item->save();
	}
    /**
     * Remove an item from order
     * POST params :
     * item_id
     */
    public function removeItem()
    {
        $order_id = @$_POST['order_id'];
        if (isset($_POST['item_id']) && $order_id) {
            $item = OrderItemModel::findOne($_POST['item_id']);
            /** @var OrderItemModel $item */
            if (!empty($item)) {
                if ($item->delete()) {
                    $this->order = OrderModel::findOne($order_id);
                    $this->form = new Form();
                    $this->form->bind($this->order);
                    $html = $this->addMetaBoxItem(null, null , true);
                    $this->responseJson([
                        'data' => $html
                    ]);
                }
            }
        }
    }

    /**
     * Add or edit order's billing address
     * POST params :
     * - Billing
     *
     * @return string JSON ajax response
     */
    public function addBillingAddress()
    {
        $response = [];
        $billing = @$_POST['Billing'];
        if (!empty($billing) && isset($_POST['order_id'])) {
            $orderId = $_POST['order_id'];
            lema()->wp->update_post_meta($orderId, 'billing_address', serialize($billing));
            $this->order = OrderModel::findOne($orderId);
            $this->form = new Form();
            $this->form->bind($this->order);
            $response = [
                'data' => $this->render('_billing_address', [
                    'order' => $this->order,
                    'form'  => $this->form
                ], true)
            ];
        }
        return $this->responseJson($response);
    }


    /**
     * Add filters to order list
     */
    public function addOrderFilter()
    {
        $type = 'post';
        if (isset($_GET['post_type'])) {
            $type = $_GET['post_type'];
        }
        if ($type == 'lema_order') {
            $options = [
                '' => __('All Instructor', 'lema')
            ];
            foreach (OrderModel::statusLabels() as $status => $label) {
                $options[$status] = $label;
            }
            echo (new Form())->field('order_status', [
                'options' => $options,
                'type' => 'select',
                'name' => 'order_status',
                'template' => '{input}',
                'selected' => isset($_GET['order_status']) ?$_GET['order_status'] : ''

            ]);

        }
    }

    /**
     * @param $query
     * @return mixed
     */
    public function addOrderFilterQuery( $query ){
        global $pagenow;
        $type = 'post';
        if (isset($_GET['post_type'])) {
            $type = $_GET['post_type'];
        }
        if ($type == 'lema_order') {
            if ( is_admin() && $pagenow == 'edit.php' && isset($_GET['order_status']) && $_GET['order_status'] != '') {
                $query->query_vars['meta_query'] = [
                    array(
                        'key' => 'order_status',
                        'value' => $_GET['order_status'],
                    )
                ];
            }
        }
        return $query;
    }


    /**
     * Register all actions that controller want to hook
     * @return mixed
     */
    public static function registerAction()
    {
        // TODO: Implement registerAction() method
        add_action( "restrict_manage_posts", [self::getInstance(), 'addOrderFilter'] );
        add_filter( "parse_query", [self::getInstance(), 'addOrderFilterQuery'] );
        return [
            'actions' => [
                'admin_init' => [self::getInstance(), 'initMetaBox'],
                'wp_loaded' => [self::getInstance(), '__init'],
                'admin_enqueue_scripts' => [self::getInstance(), 'disableAutosave'],
            ],
            'ajax' => [
                'lema_order_add_user' => [self::getInstance(), 'addUser'],
                'lema_order_add_item' => [self::getInstance(), 'addItem'],
                'lema_order_remove_item' => [self::getInstance(), 'removeItem'],
                'lema_order_add_billing' => [self::getInstance(), 'addBillingAddress']
            ]
        ];
    }
}