<?php


namespace lema\admin\controllers;


use lema\core\components\Form;
use lema\core\components\metaBox\AT_Meta_Box;
use lema\core\interfaces\ControllerInterface;
use lema\models\BundleModel;
use lema\models\CourseModel;


class BundleController extends AdminController implements ControllerInterface {

	/* @var BundleModel */
	private $bundle;
	/* @var Form */
	private $form;

	private $course_meta = 'course_meta';
	private $bundle_total_price = 'total_price';
	private $customColumns = [
		'total'     => 'Total value',
		'sale'      => 'Sale',
		'post_date' => 'Created time',
	];

	public static function registerAction() {
//	    http://localhost/educef/wp-content/plugins/learnmaster/admin/controllers/assets/js/bundle-sw-js.js
//	                            wp-content/plugins/learnmaster/admin/assets/js/bundle-sw-js.js
		return [
			'actions' => [
				'admin_init'            => [ self::getInstance(), 'initMetaBox' ],
				'wp_loaded'             => [ self::getInstance(), '__init' ],
				'admin_enqueue_scripts' => [ self::getInstance(), 'disableAutosave' ],
				'save_post'             => [ self::getInstance(), 'saveBundle' ],
			],
			'ajax'    => [
				'lema_bundle_add_item'    => [ self::getInstance(), 'addItem' ],
				'lema_bundle_remove_item' => [ self::getInstance(), 'removeItem' ],
			],

		];
	}

	//save meta post

	public function disableAutosave() {
		if ( 'lema_bundle' == get_post_type() ) {
			wp_dequeue_script( 'autosave' );
		}
		//wp-content/plugins/learnmaster/assets/admin/js/bundle-sw-js.js
		wp_enqueue_script( 'lema-sw-bundle-js', plugins_url( 'assets/js/bundle-sw-js.js', __DIR__ ), array( 'jquery' ), '1.0' );
	}

	public function __init() {
		global $post;
		lema()->hook->listenFilter( 'manage_lema_bundle_posts_columns', [ $this, 'bundleColumns' ] );
		lema()->hook->listenHook( 'manage_lema_bundle_posts_custom_column', [ $this, 'renderCustomColumns' ] );
		lema()->hook->listenFilter( 'post_row_actions', [ $this, 'removeBundleActions' ] );
		if ( get_post_type() != 'lema_bundle' ) {
			return;
		}
		parent::init(); // TODO: Change the autogenerated stub
		$this->bundle = $this->getId();
	}

	public function delete() {
		if ( lema()->wp->wp_delete_post( $_POST['post_id'], true ) ) {
			$this->responseJson( [
				'code'    => 200,
				'message' => 'Delete success',
			] );
		}
	}

	public function bundleColumns( $columns ) {
		unset( $columns['date'] );
		$columns         = array_merge( $columns, $this->customColumns );
		$columns['date'] = 'Modified';

		return $columns;
	}

	/**
	 * Show custom columns content
	 *
	 * @param $column
	 * @param $post_id
	 */
	public function renderCustomColumns( $column, $post_id = '' ) {
		global $post;
		$bundle = BundleModel::findOne( $post );

		if ( in_array( $column, array_keys( $this->customColumns ) ) ) {
			switch ( $column ) {
				case 'total' :
					echo lema()->helpers->general->currencyFormat( $bundle->total_price );
					break;
				case 'sale' :
					echo lema()->helpers->general->currencyFormat( $bundle->lema_sale_price );
					break;
				case 'post_date' :
					echo $post->post_date;
					break;
			}
		}
	}

	/**
	 * Remove unnecessary action in bundle list
	 *
	 * @param $actions
	 */
	public function removeBundleActions( $actions ) {
		if ( get_post_type() === 'lema_bundle' ) {
		}

		return $actions;
	}

	/**
	 * Add sections of bundle page
	 */
	public function initMetaBox() {
		lema()->wp->add_meta_box(
			'add_edit_bundle_item',
			'Items',
			[ self::getInstance(), 'addMetaBoxItem' ],
			'lema_bundle',
			'normal',
			'high'
		);

		$this->addMetaBoxBundle();


	}

	public function addMetaBoxBundle() {

		$config = array(
			'id'             => 'lema_bundle_meta_box',
			// meta box id, unique per meta box
			'title'          => 'Bundle Meta Fields',
			// meta box title
			'pages'          => array( 'lema_bundle' ),
			// post types, accept custom post types as well, default is array('post'); optional
			'context'        => 'normal',
			// where the meta box appear: normal (default), advanced, side; optional
			'priority'       => 'high',
			// order of meta box: high (default), low; optional
			'fields'         => array(),
			// list of meta fields (can be added by field arrays)
			'local_images'   => false,
			// Use local or hosted images (meta box images for add/remove)
			'use_with_theme' => false
			//change path if used with theme set to true, false for a plugin or anything else for a custom path(default false).
		);


		/*
		 * Initiate your meta box
		 */
		$my_meta = new AT_Meta_Box( $config );

		/*
		 * Add fields to your meta box
		 */

		//text field
		$my_meta->addTextarea( 'lema_subtitle_text', array(
			'name'  => 'Subtitle',
			'std'   => '',
			'desc'  => '',
			'style' => 'lema_subtitle_field_id',
		) );
		//about field
		$my_meta->addTextarea( 'lema_about_area', array( 'name' => 'About this Specialization' ) );


		//created by fields
		$CreatedBy_fields   = array();
		$CreatedBy_fields[] = $my_meta->addText( 'lema_createdby_info', array( 'name' => 'Info' ), true );
		$CreatedBy_fields[] = $my_meta->addText( 'lema_createdby_course', array( 'name' => 'Course' ), true );
		$CreatedBy_fields[] = $my_meta->addText( 'lema_createdby_project', array( 'name' => 'Project' ), true );
		$CreatedBy_fields[] = $my_meta->addText( 'lema_createdby_certificate', array( 'name' => 'Certificate' ), true );
		$CreatedBy_fields[] = $my_meta->addImage( 'lema_createdby_image', array( 'name' => 'Logo' ), true );

		/*
		 * Then just add the fields to the repeater block
		 */
		//repeater block
		$my_meta->addCondition( 'created_by_conditinal',
			array(
				'name'   => __( 'Enable created by fields? ', 'lema' ),
				'desc'   => __( '<small>Turn ON if you want to enable the <strong>Created By fields</strong>.</small>', 'lema' ),
				'fields' => $CreatedBy_fields,
				'std'    => false
			) );


		//Project field
		$my_meta->addTextarea( 'lema_project_area', array( 'name' => 'Project Field Area' ) );


		//Creator fields
		$Creator_fields   = array();
		$Creator_fields[] = $my_meta->addText( 'lema_creator_info_text', array( 'name' => 'Info' ), true );
		$Creator_fields[] = $my_meta->addTextarea( 'lema_creator_description_area', array( 'name' => 'Description' ), true );
		$Creator_fields[] = $my_meta->addImage( 'lema_creator_image', array( 'name' => 'Background Image' ), true );

		/*
		 * Then just add the fields to the repeater block
		 */
		//repeater block
		$my_meta->addCondition( 'creator_by_conditinal',
			array(
				'name'   => __( 'Enable Creator Fields? ', 'lema' ),
				'desc'   => __( '<small>Turn ON if you want to enable the <strong>Creator Fields</strong>.</small>', 'lema' ),
				'fields' => $Creator_fields,
				'std'    => false
			) );

		$faq_fields[] = $my_meta->addText( 'lema_faq_title_text', array( 'name' => 'Title' ), true );
		$faq_fields[] = $my_meta->addTextarea( 'lema_faq_des_area', array( 'name' => 'Description' ), true );
		/*
		 * Then just add the fields to the repeater block
		 */
		//repeater block
		$my_meta->addRepeaterBlock( 'lema_faq_repeator', array(
			'inline'   => true,
			'name'     => 'FAQ block',
			'fields'   => $faq_fields,
			'sortable' => true
		) );

		$my_meta->Finish();
	}


	public function saveBundle( $post_id ) {
		$data_post = isset( $_POST ) ? $_POST : array();
		if ( isset( $data_post['action'] ) && $data_post['action'] == 'editpost' ) {
			$this->saveMetaBox( $post_id, $data_post );
		}
	}

	public function saveMetaBox( $post_id, $data_post ) {
		$model = BundleModel::getInstance();
		$model->saveMetaData( $post_id, $data_post );
	}

	public function addItem() {

		$bundle_id   = $_POST['bundle_id'];
		$total_price = $_POST['total_price'];
		$course_id   = $_POST['course_id'];
		add_post_meta( $bundle_id, $this->course_meta, $course_id, false );
		if ( empty( get_post_meta( $bundle_id, $this->bundle_total_price ) ) ) {
			add_post_meta( $bundle_id, $this->bundle_total_price, $total_price, true );
		} else {
			update_post_meta( $bundle_id, $this->bundle_total_price, $total_price );

		}
		$this->responseJson( [
			'data'       => '1',
			'totla'      => $total_price,
			'totla_meta' => get_post_meta( $bundle_id, $this->bundle_total_price )
		] );
		exit;
	}

	public function removeItem() {
		$bundle_id   = $_POST['bundle_id'];
		$course_id   = $_POST['course_id'];
		$total_price = $_POST['total_price'];
		if ( $course_id && $bundle_id ) {
			global $wpdb;
//			$sql = 'delete from %1$s where post_id = %2$s and meta_key like %3$s and meta_value = %4$s';
//			$sql = $wpdb->prepare( $sql, $wpdb->postmeta, $bundle_id, $this->course_meta, $course_id );
			$res = get_post_meta( $bundle_id, $this->course_meta );
			delete_post_meta( $bundle_id, $this->course_meta, $course_id );
			if ( empty( get_post_meta( $bundle_id, $this->bundle_total_price ) ) ) {
				add_post_meta( $bundle_id, $this->bundle_total_price, $total_price, true );
			} else {
				update_post_meta( $bundle_id, $this->bundle_total_price, $total_price );
			}
		}
		$this->responseJson( [ 'data' => $res ] );

		exit;
	}

	public function addMetaBoxItem( $post, $box, $return = false ) {
		$course       = CourseModel::getInstance();
		$bundle_model = new BundleModel();
		$bundle_item  = $bundle_model::get_list_course_bundle( $post->ID );

		$allBundle   = new \WP_Query( array(
			'post_type'   => $bundle_model->getName(),
			'post_status' => 'publish'
		) );
		$post_not_in = [];
		foreach ( $allBundle->posts as $bundl ) {
			$item_bundl  = get_post_meta( $bundl->ID, $this->course_meta );
			$post_not_in = array_merge( $post_not_in, $item_bundl );
		}
		$query = $course->getAll( array( 'post__not_in' => $post_not_in ) );

		$lema_sale_price = get_post_meta( $post->ID, 'lema_sale_price', true );
		$instructors     = $bundle_model->getInstructors( $post->ID );
		$best_selling    = get_post_meta( $post->ID, 'best_selling', true );

		return $this->render( 'bundle_item', [
			'bundle'          => $this->bundle,
			'course'          => $query,
			'bundle_item'     => $bundle_item,
			'lema_sale_price' => $lema_sale_price,
			'instructors'     => $instructors,
			'best_selling'    => $best_selling,

		], $return );
	}
}