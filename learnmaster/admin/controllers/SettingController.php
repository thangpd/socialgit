<?php
/**
 * @project  edu
 * @copyright Â© 2017 by ivoglent
 * @author ivoglent
 * @time  7/25/17.
 */


namespace lema\admin\controllers;


use lema\core\components\Form;
use lema\core\components\Hook;
use lema\core\interfaces\ControllerInterface;
use lema\core\RuntimeException;
use lema\models\CourseLevelModel;
use lema\models\CourseLanguageModel;


class SettingController extends AdminController implements ControllerInterface
{
    public $viewPath = '';

    /**
     * Default template mails
     * @var string
     */
    private $mailTemplateDirectory = LEMA_PATH . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . 'emails';

    /**
     * Default tabs
     * @var array
     */
    private $tabs = [
        'general' => [
            'label' => 'General',
            'renderer' => ['lema\admin\controllers\SettingController', 'tabGeneral']
        ],
        'course' => [
            'label' => 'Course settings',
            'renderer' => ['lema\admin\controllers\SettingController', 'tabCourse']
        ],
        'cache' => [
            'label' => 'Cache',
            'renderer' => ['lema\admin\controllers\SettingController', 'tabCache']
        ],
        'mail' => [
            'label' => 'Email settings',
            'renderer' => ['lema\admin\controllers\SettingController', 'tabEmail']
        ],
        'payment' => [
            'label' => 'Payment',
            'renderer' => ['lema\admin\controllers\SettingController', 'tabPayment']
        ],
        'frontend' => [
            'label' => 'Frontend',
            'renderer' => ['lema\admin\controllers\SettingController', 'tabData']
        ]
    ];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * Check is current tab
     * @param $tab
     * @return bool
     */
    private function isCurrent($tab) {
        $currentTab = 'general';
        return isset($_GET['page']) && $_GET['page'] == 'lema-setting' && ((isset($_GET['tab']) && $_GET['tab'] == $tab)  || (!isset($_GET['tab']) && $tab == $currentTab));
    }

    /**
     * Generate setting tabs page
     */
    public function generateTabs()
    {
        $this->tabs = lema()->hook->registerFilter('lema_admin_setting_tabs', $this->tabs);
        foreach ($this->tabs as $name => &$tab) {
            $tab['active'] = $this->isCurrent($name);
            if ($tab['active']) {
                $renderer = $tab['renderer'];
                $tab['tabContent'] = call_user_func($renderer);
            }
        }

        return $this->render('settings', ['tabs' => $this->tabs]);

    }

    /**
     * For general tab
     * @return string
     */
    public function tabGeneral(){
        if (isset($_POST['General']) && !empty($_POST['General'])) {
            foreach ($_POST['General'] as $name => $value) {
                lema()->config->$name = $value;
            }
        }
        $optionFields = [
            'lema_currency' => [
                'type' => 'select',
                'label' => __('Primary Currency', 'lema'),
                'selected' => lema()->config->lema_currency,
                'options' => lema()->hook->registerFilter('lema_currencies_list', []),
                'name' => 'General[lema_currency]',
                'attributes' => [
                    'class' => 'la-form-control',
                    'data-select-2' =>  true
                ]
            ],
            'lema_course_language' => [
                'type' => 'select',
                'label' => __('Default language', 'lema'),
                'selected' => lema()->config->lema_course_language,
                'options' => (new CourseLanguageModel())->getOptions(),
                'name' => 'General[lema_course_language]',
                'attributes' => [
                    'class' => 'la-form-control',
                    'data-select-2' =>  true
                ]
            ],
            'lema_course_level' => [
                'type' => 'select',
                'label' => __('Default level', 'lema'),
                'selected' => lema()->config->lema_course_level,
                'options' => (new CourseLevelModel())->getOptions(),
                'name' => 'General[lema_course_level]',
                'attributes' => [
                    'class' => 'la-form-control',
                    'data-select-2' =>  true
                ]
            ],

        ];
        $optionFields = lema()->hook->registerFilter('lema_admin_options', $optionFields);

        $form = new Form();
        $fields = [];
        foreach ($optionFields as $name => $optionField) {
            $fields[] = $form->field($name, $optionField);
        }
        if (defined('DOING_AJAX')) {
            $this->render('_general', [
                'fields' => $fields,
                'message' => __('Your change saved successfully', 'lema')
            ]);
            exit;
        }
        return $this->render('_general', [
            'fields' => $fields
        ], true);
    }

    /**
     * For general tab
     * @return string
     */
    public function tabData(){
        $data = [];
        if (isset($_POST['Pages'])) {
            foreach ($_POST['Pages'] as $name => $value) {
                lema()->config->$name = $value;
            }
            $data['message'] = 'The setting has been saved successfully';
        }
        $pages = lema()->config->pages;
        $form = new Form();
        $baseUrl = site_url();
        foreach ($pages as $name => $options) {
            $value = lema()->config->$name;
            $options['name'] = "Pages[$name]";
            $options['type'] = 'text';
            $options['attributes'] = ['class' => 'la-form-control'];
            $options['template'] = "{label}<div class='config-url'><div class='slug_url'>{input}</div> </div>";
            $options['value'] = empty($value)?  $options['slug'] : $value;
            $data['pages'][$name] = $form->field($name, $options);
        }

        if (defined('DOING_AJAX')) {
            $this->render('_data', $data);
            exit;
        }
        return $this->render('_data', $data, true);
    }



    /**
     * For cache tab
     * @return string
     */
    public function tabCache(){
        $data = [
            'caches' => [
                'core_cache' => __('Core caches', 'lema'),
                'data_cache'    => __('Data caches', 'lema'),
                'asset_cache'   => __('Static asset caches', 'lema')
            ]
        ];
        $options = apply_filters('lema_cache_options', []);
        $data['options'] = $options;
        if (isset($_POST['all_caches'])) {
            $this->flushCoreCaches();
            $this->flushDataCaches();
            $this->flushAssetsCaches();
            $data['message'] = 'All cache has been flushed successfully';
            $this->render('_cache', $data);
            exit;

        }
        if (isset($_POST['Cache'])) {
            $caches = $_POST['Cache'];
            if (isset($caches['core_cache'])) {
                $this->flushCoreCaches();
            }
            if (isset($_POST['data_cache'])) {
                $this->flushDataCaches();
            }
            if (isset($caches['asset_cache'])) {
                $this->flushAssetsCaches();
            }
            $data['message'] = 'The cache has been flushed successfully';
        }
        if (isset($_POST['Options'])) {
            $ops = [];
            foreach ($options as $name => $label) {
                $ops[$name] =  0;
            }
            $_options = $_POST['Options'];
            $_options = array_merge($ops, $_options);
            foreach ($_options as $name => $value) {
                update_option($name, $value);
            }
            $data['message'] = 'Your settings has been saved successfully';
        }
        if (defined('DOING_AJAX')) {
            $this->render('_cache', $data);
            exit;
        }
        return $this->render('_cache', $data, true);
    }

    /**
     * Clear core caches
     * - Class cache
     * - Master data cache
     */
    private function flushCoreCaches()
    {
        lema()->hook->registerHook('flushCache', 'all');
    }

    /**
     * Clear all data cachea
     */
    private function flushDataCaches()
    {

    }
    private function flushAssetsCaches()
    {
        lema()->helpers->file->removeDir(LEMA_WR_DIR . DIRECTORY_SEPARATOR . 'assets');
    }

    /**
     * Course settings
     * @return string
     */
    public function tabCourse()
    {
        $data = [];
        if (isset($_POST['Options'])) {
            foreach ($_POST['Options'] as $name => $value) {
                lema()->config->$name = $value;
            }
            $data['message'] = 'The cache has been flushed successfully';
        }
        $options = [
            'course_list' => [
                'lema_posts_per_page' => [
                    'type' => 'text',
                    'label' => __('Default course per page', 'lema'),
                    'name' => 'Options[lema_posts_per_page]',
                    'attributes' => [
                        'class' => 'la-form-control lema-setting-input'
                    ],
                    'value' => lema()->config->lema_posts_per_page
                ],
                'lema_orderBy' => [
                    'type' => 'select',
                    'label' => __('Default list order by', 'lema'),
                    'name' =>  'Options[lema_orderBy]',
                    'attributes' => [
                        'class' => 'la-form-control lema-setting-input'
                    ],
                    'options' => [
                        'title' => __('Course title', 'lema'),
                        '__price' => __('Course price', 'lema'),
                        'post_date' => __('Created date', 'lema')
                    ],
                    'selected' => lema()->config->lema_orderBy
                ],
                'lema_cols_on_row' => [
                    'type' => 'text',
                    'label' => __('Default course columns', 'lema'),
                    'value' => lema()->config->lema_cols_on_row,
                    'attributes' => [
                        'class' => 'la-form-control lema-setting-input'
                    ],
                    'name' => 'Options[lema_cols_on_row]'
                ],
	            'lema_price_setting' => [
		            'type' => 'text',
		            'label' => __('Text to display when price is zero', 'lema'),
		            'value' => lema()->config->lema_price_setting,
		            'attributes' => [
			            'class' => 'la-form-control lema-setting-input'
		            ],
		            'name' => 'Options[lema_price_setting]'
	            ]
            ],
            'course' => [
                //'customfields' => apply_filters('lema_course_customfields', [])
            ]
        ];
        $form = new Form();
        $options =  lema()->hook->registerFilter('lema_course_settings', $options);
        $fields = [];
        foreach ($options['course_list'] as $name => $attribute) {
            $fields['course_list'][] = $form->field($name, $attribute);
        }
        $data['courseOptions'] = @$fields['course'];
        $data['courseListOptions'] = $fields['course_list'];

        if (defined('DOING_AJAX')) {
            $this->render('_course', $data);
            exit;
        }
        return $this->render('_course', $data, true);
    }

    /**
     * Payment settings tab
     * @return string
     */
    public function tabPayment()
    {
        $data = [];
        $paymentGateways = [];
        $paymentGateways = lema()->hook->registerFilter('lema_payment_gateways', $paymentGateways);

        if (isset($_POST['Payment'])) {
            $payment = $_POST['Payment'];
            if (isset($payment['gateways'])) {
                lema()->config->lema_payment_gateways = $payment['gateways'];
                $data['message'] = __('Your changes have been saved successfully', 'lema');
            }
        }


        $data['gateways'] = $paymentGateways;
        $enabledGateways = lema()->config->lema_payment_gateways;
        if (empty($enabledGateways)) {
            $enabledGateways = [];
        }
        $data['enabledGateways'] = $enabledGateways;
        if (isset($_GET['section'])) {
            $gatewayId = $_GET['section'];
            if (isset($paymentGateways[$gatewayId])) {
                $data['gateway'] = $paymentGateways[$gatewayId];
            }
        }
        if (defined('DOING_AJAX')) {
            $this->render('_payment', $data);
            exit;
        }
        return $this->render('_payment', $data,  true);
    }

    /**
     * @param $template
     * @return bool|string
     */
    public function fileGetContent($template){
        return file_get_contents($this->mailTemplateDirectory . DIRECTORY_SEPARATOR . $template.'.html');
    }
    /**
     * Email settings tab
     * @return string
     */
    public function tabEmail()
    {
        $data = [];
        if (isset($_POST['edit_email_template']) && isset($_POST['name_template']) && isset($_POST['content_template'])) {
            $name_template = $_POST['name_template'];
            lema()->mailer->setMailTemplate($name_template, stripslashes($_POST['content_template']));
            $data['message'] = __('Your change saved successfully', 'lema');
        }
        if (isset($_POST['reset_template'])) {
            $name_template = $_POST['name_template'];
            lema()->mailer->restoreDefault($name_template);
            $data['message'] = __('Your template was reset to default', 'lema');
        }
        $mailList = lema()->mailer->getMailingList();

        $list = [
            '' => __('Choses template to edit', 'lema'),
        ];
        foreach ($mailList as $type => $item) {
            $list[$type] = $item['title'];
        }

        $optionFields = [
            'lema_email_template' => [
                'type' => 'select',
                'label' => __('Edit email template: ', 'lema'),
                'selected' => @$_GET['template'],
                'options' => $list,
                'name' => 'template',
                'attributes' => [
                    'class' => 'la-form-control',
                    'data-select-2' =>  true,
                    'data-autosubmit' => true,
                ]
            ],

        ];
        $optionFields = lema()->hook->registerFilter('lema_admin_mail_options', $optionFields);

        $form = new Form();
        $fields = [];
        foreach ($optionFields as $name => $optionField) {
            $fields[] = $form->field($name, $optionField);
        }
        if (defined('DOING_AJAX')) {
            $this->render('_general', [
                'fields' => $fields,
                'message' => __('Your change saved successfully', 'lema')
            ]);
            exit;
        }
        return $this->render('_email', array_merge($data,  [
            'fields' => $fields,
            'mailList' => $mailList,
            'mailTemplate' => !empty($_GET['template']) ? lema()->mailer->getMailTemplate($_GET['template']) : ''
        ]), true);
    }
    /**
     * @param $menu
     * @return mixed
     */
    public function registerAdminMenu($menu)
    {
        $menu['setting']['menu-sub-item'][]  = array(
            'page-title' => '',
            'menu-title' => 'Settings',
            'capability' => 'manage_options',
            'slug' => 'admin.php?page=lema-setting',
            'parent' => 'lema-setting-page'
        );
        return $menu;
    }
    /**
     * Register all actions that controller want to hook
     * @return mixed
     */
    public static function registerAction()
    {
        // TODO: Implement registerAction() method.

        lema()->hook->listenFilter(Hook::LEMA_HOOK_ADMIN_MENU, [self::getInstance(), 'registerAdminMenu']);
        return [
            'pages' => [
                'admin' => [
                    'lema-setting' => [
                        'title' => 'Learn master settings',
                        'capability' => 'activate_plugins',
                        'action' => [self::getInstance(), 'generateTabs'],
                        'menu' => 'learnmaster-setting-menu'
                    ]
                ]
            ],
            'ajax' => [
                'setting-data-save' => [self::getInstance(), 'tabData'],
                'setting-cache-save' => [self::getInstance(), 'tabCache'],
                'options-cache-save' => [self::getInstance(), 'tabCache'],
                'setting-general-save' => [self::getInstance(), 'tabGeneral'],
                'setting-course-save' => [self::getInstance(), 'tabCourse'],
                'setting-payment-save' => [self::getInstance(), 'tabPayment'],
            ]
        ];
    }
}