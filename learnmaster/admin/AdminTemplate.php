<?php
namespace lema\admin;

use lema\admin\controllers\FieldController;
use lema\core\components\Hook;

use lema\core\components\RoleManager;
use lema\core\components\Script;
use lema\core\components\Style;
use lema\core\interfaces\ResourceInterface;
use lema\core\Template;

class AdminTemplate extends Template
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if (is_admin()) {
            $assets = $this->getAssets();
            foreach ($assets as $type => $resources) {
                foreach ($resources as $resource) {
                    /** @var ResourceInterface $static */
                    $static = '';
                    if ($type == 'css') {
                        $static = new Style($resource);
                        wp_enqueue_style($static->getId(), $static->getUrl(), $static->getDependencies());
                    } else {
                        $static = new Script($resource);
                        wp_enqueue_script($static->getId(), $static->getUrl(), $static->getDependencies());
                    }
                }
            }
        }
    }

    public function getAssets()
    {
        return [
            'css' => [
                [
                    'id' => 'admin-ui-style',
                    'isInline' => false,
                    'url' => '/assets/admin/css/learnmaster-admin.css',
                    'dependencies' => ['lema-style']
                ],
                [
                    'id' => 'nestable-style',
                    'isInline' => false,
                    'url' => '/assets/admin/libs/Nestable-master/jquery.nestable.css',
                ],
            ],
            'js' => [
                [
                    'id' => 'jquery-ui-script',
                    'isInline' => false,
                    'url' => '/assets/admin/libs/jquery-ui-1.11.4/jquery-ui.min.js',
                    'dependencies' =>['jquery', 'lema', 'lema.ui']
                ],
                [
                    'id' => 'jquery.pjax',
                    'isInline' => false,
                    'url' => '/assets/scripts/jquery.pjax.min.js',
                    'dependencies' => ['jquery']
                ],
                [
                    'id' => 'tinymce-script',
                    'isInline' => false,
                    'url' => '/assets/admin/libs/tinymce/tinymce.min.js',
                    'dependencies' => ['jquery']
                ],
                [
                    'id' => 'lema-admin-script',
                    'isInline' => false,
                    'url' => '/assets/admin/js/learnmaster-admin.js',
                    'dependencies' => ['jquery']
                ],
                [
                    'id' => 'lema-admin-ui-script',
                    'isInline' => false,
                    'url' => '/assets/admin/js/learnmaster-admin_ui.js',
                    'dependencies' => ['jquery']
                ],
                [
                    'id' => 'nestable-script',
                    'isInline' => false,
                    'url' => '/assets/admin/libs/Nestable-master/jquery.nestable.js',
                    'dependencies' => ['lema-admin-ui-script']
                ],

                [
                    'id' => 'selectize',
                    'isInline' => false,
                    'url' => '/assets/admin/libs/selectize/selectize.min.js',
                    'dependencies' => ['lema-admin-ui-script']
                ]
            ]
        ];
    }

    //add list menu item for admin menu
    public function addAdminMenu()
    {
        $main_menu = $this->getListMenuConfig();
        $main_menu = lema()->hook->registerFilter(Hook::LEMA_HOOK_ADMIN_MENU, $main_menu);
        foreach ($main_menu as $item) {
            $this->addMenuPageAdmin($item);
        }
    }

    //add a menu for menu admin
    public function addMenuPageAdmin($item) {
        if ( !empty($item['callback']) ) {
            add_menu_page($item['page-title'], $item['menu-title'],
                $item['capability'], $item['slug'], array($this, $item['callback']),
                $item['icon'], $item['position']);
        } else {
            add_menu_page($item['page-title'], $item['menu-title'],
                $item['capability'], $item['slug'], '',
                $item['icon'], $item['position']);
        }

        if (isset($item['menu-sub-item']) && count($item['menu-sub-item']) > 0) {
            foreach ($item['menu-sub-item'] as $subitem) {
                if (!empty($subitem['callback'])) {
                    add_submenu_page($item['slug'], $subitem['page-title'], $subitem['menu-title'], $subitem['capability'], $subitem['slug'], $subitem['callback']);
                } else {
                    add_submenu_page($item['slug'], $subitem['page-title'], $subitem['menu-title'], $subitem['capability'], $subitem['slug'], false);
                }
            }
        }
    }

    /**
     * Defined list of default admin menu
     * @return array
     */
    public function getListMenuConfig()
      {

          $list_menu = [
            'setting' => array(
                'page-title' => '',
                'menu-title' => 'Learn Master',
                'capability' => RoleManager::LEMA_CAP_SETTING,
                'slug' => 'lema-setting-page',
                'icon' => 'dashicons-welcome-learn-more',
                'position' => 5,
                'callback' => '',
                'menu-sub-item' => []
            ),
            'course' => array(
                'page-title' => '',
                'menu-title' => 'Courses',
                'capability' => RoleManager::LEMA_CAP_COURSE,
                'slug' => 'edit.php?post_type=course',
                'icon' => 'dashicons-book',
                'position' => 6,
                'menu-sub-item' => array(
                    array(
                        'page-title' => '',
                        'menu-title' => 'Add Course',
                        'capability' => 'manage_options',
                        'slug' => 'post-new.php?post_type=course',
                    ),
                    array(
                        'page-title' => 'Categories',
                        'menu-title' => 'Categories',
                        'capability' => 'manage_options',
                        'slug' => 'edit-tags.php?taxonomy=cat_course&amp;post_type=course'
                    ),
                    array(
                        'page-title' => 'Tags',
                        'menu-title' => 'Tags',
                        'capability' => 'manage_options',
                        'slug' => 'edit-tags.php?taxonomy=tag_course&amp;post_type=course'
                    ),
                    array(
                        'page-title' => 'Levels',
                        'menu-title' => 'Levels',
                        'capability' => 'manage_options',
                        'slug' => 'edit-tags.php?taxonomy=level_course&amp;post_type=course'
                    ),
                     array(
                        'page-title' => 'Languages',
                        'menu-title' => 'Languages',
                        'capability' => 'manage_options',
                        'slug' => 'edit-tags.php?taxonomy=language_course&amp;post_type=course'
                    ),
                    array(
                        'page-title' => 'Custom fields',
                        'menu-title' => 'Custom fields',
                        'capability' => 'manage_options',
                        'slug' => 'course-custom-fields',
                        'callback' => [FieldController::getInstance(), 'customFieldPage']
                    )
                )
            ),

          ];

          return $list_menu;
      }
}